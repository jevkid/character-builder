{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit'; // set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n// save form\n\nconst initialState = {\n  selectedRace: {},\n  selectedSubrace: {},\n  selectedClass: {},\n  selectedSubclass: {}\n};\nconst SLICE_NAME = 'characterBuilder';\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    setSelectedRaceToStatePending: (state, action) => {\n      state.selectedRace.pending = true;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateSuccess: (state, action) => {\n      state.selectedRace.selected = action.payload;\n      state.selectedRace.pending = false;\n      state.selectedRace.success = true;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateFailure: (state, action) => {\n      state.selectedRace.pending = false;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = true;\n    },\n    setSelectedSubraceToState: (state, action) => {\n      state.selectedSubrace = action.payload;\n    },\n    setSelectedClassToState: (state, action) => {\n      state.selectedClass = action.payload;\n    },\n    setSelectedSubclassToState: (state, action) => {\n      state.selectedSubclass = action.payload;\n    }\n  }\n});\nexport const {\n  reducer: characterBuilderReducer\n} = characterBuilderSlice;\nexport const characterBuilderActions = { ...characterBuilderSlice.actions,\n  setSelectedRaceToState: createAction(`${SLICE_NAME}/setSelectedRaceToState`, payload => ({\n    payload\n  })),\n  setSelectedSubraceToState: createAction(`${SLICE_NAME}/setSelectedSubraceToState`, payload => ({\n    payload\n  })),\n  setSelectedClassToState: createAction(`${SLICE_NAME}/setSelectedClassToState`, payload => ({\n    payload\n  })),\n  setSelectedSubclassToState: createAction(`${SLICE_NAME}/setSelectedSubclassToState`, payload => ({\n    payload\n  }))\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/characterBuilder.ts"],"names":["createAction","createSlice","initialState","selectedRace","selectedSubrace","selectedClass","selectedSubclass","SLICE_NAME","characterBuilderSlice","name","reducers","setSelectedRaceToStatePending","state","action","pending","success","failure","setSelectedRaceToStateSuccess","selected","payload","setSelectedRaceToStateFailure","setSelectedSubraceToState","setSelectedClassToState","setSelectedSubclassToState","reducer","characterBuilderReducer","characterBuilderActions","actions","setSelectedRaceToState"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,QAAyD,kBAAzD,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8BA,MAAMC,YAAmC,GAAG;AAC1CC,EAAAA,YAAY,EAAE,EAD4B;AAE1CC,EAAAA,eAAe,EAAE,EAFyB;AAG1CC,EAAAA,aAAa,EAAE,EAH2B;AAI1CC,EAAAA,gBAAgB,EAAE;AAJwB,CAA5C;AAOA,MAAMC,UAAU,GAAG,kBAAnB;AAEA,MAAMC,qBAAqB,GAAGP,WAAW,CAAC;AACxCQ,EAAAA,IAAI,EAAEF,UADkC;AAExCL,EAAAA,YAFwC;AAGxCQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,6BAA6B,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AACvED,MAAAA,KAAK,CAACT,YAAN,CAAmBW,OAAnB,GAA6B,IAA7B;AACAF,MAAAA,KAAK,CAACT,YAAN,CAAmBY,OAAnB,GAA6B,KAA7B;AACAH,MAAAA,KAAK,CAACT,YAAN,CAAmBa,OAAnB,GAA6B,KAA7B;AACD,KALO;AAMRC,IAAAA,6BAA6B,EAAE,CAACL,KAAD,EAAQC,MAAR,KAA0C;AACvED,MAAAA,KAAK,CAACT,YAAN,CAAmBe,QAAnB,GAA8BL,MAAM,CAACM,OAArC;AACAP,MAAAA,KAAK,CAACT,YAAN,CAAmBW,OAAnB,GAA6B,KAA7B;AACAF,MAAAA,KAAK,CAACT,YAAN,CAAmBY,OAAnB,GAA6B,IAA7B;AACAH,MAAAA,KAAK,CAACT,YAAN,CAAmBa,OAAnB,GAA6B,KAA7B;AACD,KAXO;AAYRI,IAAAA,6BAA6B,EAAE,CAACR,KAAD,EAAQC,MAAR,KAA0C;AACvED,MAAAA,KAAK,CAACT,YAAN,CAAmBW,OAAnB,GAA6B,KAA7B;AACAF,MAAAA,KAAK,CAACT,YAAN,CAAmBY,OAAnB,GAA6B,KAA7B;AACAH,MAAAA,KAAK,CAACT,YAAN,CAAmBa,OAAnB,GAA6B,IAA7B;AACD,KAhBO;AAiBRK,IAAAA,yBAAyB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAA0C;AACnED,MAAAA,KAAK,CAACR,eAAN,GAAwBS,MAAM,CAACM,OAA/B;AACD,KAnBO;AAoBRG,IAAAA,uBAAuB,EAAE,CAACV,KAAD,EAAQC,MAAR,KAA0C;AACjED,MAAAA,KAAK,CAACP,aAAN,GAAsBQ,MAAM,CAACM,OAA7B;AACD,KAtBO;AAuBRI,IAAAA,0BAA0B,EAAE,CAACX,KAAD,EAAQC,MAAR,KAA0C;AACpED,MAAAA,KAAK,CAACN,gBAAN,GAAyBO,MAAM,CAACM,OAAhC;AACD;AAzBO;AAH8B,CAAD,CAAzC;AAgCA,OAAO,MAAM;AAAEK,EAAAA,OAAO,EAAEC;AAAX,IAAuCjB,qBAA7C;AAEP,OAAO,MAAMkB,uBAAuB,GAAG,EACrC,GAAGlB,qBAAqB,CAACmB,OADY;AAGrCC,EAAAA,sBAAsB,EAAE5B,YAAY,CACjC,GAAEO,UAAW,yBADoB,EAEjCY,OAAD,KAAgC;AAC9BA,IAAAA;AAD8B,GAAhC,CAFkC,CAHC;AASrCE,EAAAA,yBAAyB,EAAErB,YAAY,CACpC,GAAEO,UAAW,4BADuB,EAEpCY,OAAD,KAAmC;AACjCA,IAAAA;AADiC,GAAnC,CAFqC,CATF;AAerCG,EAAAA,uBAAuB,EAAEtB,YAAY,CAClC,GAAEO,UAAW,0BADqB,EAElCY,OAAD,KAAiC;AAC/BA,IAAAA;AAD+B,GAAjC,CAFmC,CAfA;AAqBrCI,EAAAA,0BAA0B,EAAEvB,YAAY,CACrC,GAAEO,UAAW,6BADwB,EAErCY,OAAD,KAAoC;AAClCA,IAAAA;AADkC,GAApC,CAFsC;AArBH,CAAhC","sourcesContent":["import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n// save form\n\n\nexport interface CharacterBuilderState {\n  selectedRace: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n  selectedSubrace: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n  selectedClass: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n  selectedSubclass: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n}\n\nconst initialState: CharacterBuilderState = {\n  selectedRace: {},\n  selectedSubrace: {},\n  selectedClass: {},\n  selectedSubclass: {},\n};\n\nconst SLICE_NAME = 'characterBuilder';\n\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    setSelectedRaceToStatePending: (state, action: PayloadAction<string>) => {\n      state.selectedRace.pending = true;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateSuccess: (state, action: PayloadAction<string>) => {\n      state.selectedRace.selected = action.payload;\n      state.selectedRace.pending = false;\n      state.selectedRace.success = true;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateFailure: (state, action: PayloadAction<string>) => {\n      state.selectedRace.pending = false;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = true;\n    },\n    setSelectedSubraceToState: (state, action: PayloadAction<string>) => {\n      state.selectedSubrace = action.payload;\n    },\n    setSelectedClassToState: (state, action: PayloadAction<string>) => {\n      state.selectedClass = action.payload;\n    },\n    setSelectedSubclassToState: (state, action: PayloadAction<string>) => {\n      state.selectedSubclass = action.payload;\n    },\n  },\n});\n\nexport const { reducer: characterBuilderReducer } = characterBuilderSlice;\n\nexport const characterBuilderActions = {\n  ...characterBuilderSlice.actions,\n\n  setSelectedRaceToState: createAction(\n    `${SLICE_NAME}/setSelectedRaceToState`,\n    (payload: { race: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedSubraceToState: createAction(\n    `${SLICE_NAME}/setSelectedSubraceToState`,\n    (payload: { subrace: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedClassToState: createAction(\n    `${SLICE_NAME}/setSelectedClassToState`,\n    (payload: { class: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedSubclassToState: createAction(\n    `${SLICE_NAME}/setSelectedSubclassToState`,\n    (payload: { subclass: string }) => ({\n      payload,\n    }),\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}