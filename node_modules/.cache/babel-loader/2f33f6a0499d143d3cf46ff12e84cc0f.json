{"ast":null,"code":"var _jsxFileName = \"/Users/meganjevin/Desktop/Code/character-builder/src/app/components/race.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { useAppDispatch } from '../../helpers/hooks';\nimport { commonActions } from '../../store/slices/common';\nimport { useAllRaces, useDetailedRace } from '../../store/selectors/common';\nimport { TEXT_COLOR_PRIMARY, TEXT_COLOR_SECONDARY } from '../styles';\nimport { handleRandomise } from '../../helpers/randomise';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledStep = styled.div`\n  text-align: center;\n`;\n_c = StyledStep;\nconst StyledStepsHeader = styled.h3`\n  text-align: center;\n  margin: 12px 0;\n`;\n_c2 = StyledStepsHeader;\nconst StyledStepsSubheader = styled.h5`\n  text-align: center;\n  margin: 12px 0;\n`;\n_c3 = StyledStepsSubheader;\nconst StyledSelect = styled.select`\n  width: 200px;\n  height: 30px;\n  border-radius: 5px;\n  margin: 12px 0;\n`;\n_c4 = StyledSelect;\nconst StyledRandomiseButton = styled.a`\n  font-size: inherit;\n  color: ${TEXT_COLOR_SECONDARY};\n  &:hover {\n    cursor: pointer;\n    color: ${TEXT_COLOR_PRIMARY};\n  }\n`;\n_c5 = StyledRandomiseButton;\nconst StyledStepContainer = styled.div`\n  display: flex;\n`;\n_c6 = StyledStepContainer;\nconst StyledDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 65%;\n`;\n_c7 = StyledDetails;\nexport const Race = props => {\n  _s();\n\n  var _allRaces$results;\n\n  const dispatch = useAppDispatch();\n  const allRaces = useAllRaces();\n  const detailedRace = useDetailedRace();\n  const [allSubRaces, setAllSubRaces] = React.useState([]);\n  const [selectedRace, setSelectedRace] = React.useState(undefined);\n  const [selectedSubRace, setSelectedSubRace] = React.useState(undefined);\n  const [displayRaceDetails, setDisplayRaceDetails] = React.useState(false);\n\n  const handleSelectedSubRace = index => {\n    const selectedSubRace = allSubRaces === null || allSubRaces === void 0 ? void 0 : allSubRaces.filter(subRace => subRace.index === index);\n\n    if (selectedSubRace && selectedSubRace.length > 0) {\n      setSelectedSubRace({\n        index: selectedSubRace[0].index,\n        name: selectedSubRace[0].name\n      });\n    }\n  };\n\n  const handleRandomRace = () => {\n    if (allRaces === null || allRaces === void 0 ? void 0 : allRaces.results) {\n      const randomRace = handleRandomise(allRaces === null || allRaces === void 0 ? void 0 : allRaces.results);\n      setSelectedRace({\n        index: randomRace.index,\n        name: randomRace.name\n      });\n      dispatch(commonActions.getRaceDetails({\n        index: randomRace.index\n      }));\n    }\n  };\n\n  const handleSelectedRace = index => {\n    const selectedRace = allRaces === null || allRaces === void 0 ? void 0 : allRaces.results.filter(race => race.index === index);\n\n    if (selectedRace && selectedRace.length > 0) {\n      setSelectedRace({\n        index: selectedRace[0].index,\n        name: selectedRace[0].name\n      });\n      dispatch(commonActions.getRaceDetails({\n        index: selectedRace[0].index\n      }));\n    }\n  };\n\n  React.useEffect(() => {\n    dispatch(commonActions.getAllRaces());\n  }, []);\n  React.useEffect(() => {\n    if (detailedRace === null || detailedRace === void 0 ? void 0 : detailedRace.subraces) {\n      setAllSubRaces(detailedRace === null || detailedRace === void 0 ? void 0 : detailedRace.subraces);\n      setDisplayRaceDetails(true);\n    } // from here, we need to get the subraces object from the detailed race response and use that to populate the subraces dropdown\n\n  }, [detailedRace]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledStepContainer, {\n      children: [/*#__PURE__*/_jsxDEV(StyledStep, {\n        children: [/*#__PURE__*/_jsxDEV(StyledStepsHeader, {\n          children: \"Step One: Race\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledStepsSubheader, {\n          children: [\"Select a race or\", ' ', /*#__PURE__*/_jsxDEV(StyledRandomiseButton, {\n            onClick: () => handleRandomRace(),\n            children: \"randomise\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), ' ', \"it.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledSelect, {\n          value: selectedRace === null || selectedRace === void 0 ? void 0 : selectedRace.index,\n          ...props.register('race'),\n          onChange: e => {\n            handleSelectedRace(e.target.value);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"- - - -\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), allRaces && (allRaces === null || allRaces === void 0 ? void 0 : (_allRaces$results = allRaces.results) === null || _allRaces$results === void 0 ? void 0 : _allRaces$results.map(race => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: race.index,\n            children: race.name\n          }, race.index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this)))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), props.errors.race && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), detailedRace && displayRaceDetails && /*#__PURE__*/_jsxDEV(StyledDetails, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Languages: \", detailedRace.language_desc]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: detailedRace.languages.map(language => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: language.name\n          }, language.index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Alignment: \", detailedRace.alignment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Size: \", detailedRace.size_description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), allSubRaces && allSubRaces.length > 0 && /*#__PURE__*/_jsxDEV(StyledStepContainer, {\n      children: /*#__PURE__*/_jsxDEV(StyledStep, {\n        children: [/*#__PURE__*/_jsxDEV(StyledStepsSubheader, {\n          children: \"Select a subrace (optional).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StyledSelect, {\n          value: selectedSubRace === null || selectedSubRace === void 0 ? void 0 : selectedSubRace.name,\n          ...props.register('subRace'),\n          onChange: e => {\n            handleSelectedSubRace(e.target.value);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"- - - -\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this), allSubRaces.map(subRace => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: subRace.index,\n            children: subRace.name\n          }, subRace.index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), props.errors.subRace && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Race, \"EnJM1emUosLzGI+CrjFgqnxPB5Y=\", false, function () {\n  return [useAppDispatch, useAllRaces, useDetailedRace];\n});\n\n_c8 = Race;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"StyledStep\");\n$RefreshReg$(_c2, \"StyledStepsHeader\");\n$RefreshReg$(_c3, \"StyledStepsSubheader\");\n$RefreshReg$(_c4, \"StyledSelect\");\n$RefreshReg$(_c5, \"StyledRandomiseButton\");\n$RefreshReg$(_c6, \"StyledStepContainer\");\n$RefreshReg$(_c7, \"StyledDetails\");\n$RefreshReg$(_c8, \"Race\");","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/app/components/race.tsx"],"names":["React","styled","useAppDispatch","commonActions","useAllRaces","useDetailedRace","TEXT_COLOR_PRIMARY","TEXT_COLOR_SECONDARY","handleRandomise","StyledStep","div","StyledStepsHeader","h3","StyledStepsSubheader","h5","StyledSelect","select","StyledRandomiseButton","a","StyledStepContainer","StyledDetails","Race","props","dispatch","allRaces","detailedRace","allSubRaces","setAllSubRaces","useState","selectedRace","setSelectedRace","undefined","selectedSubRace","setSelectedSubRace","displayRaceDetails","setDisplayRaceDetails","handleSelectedSubRace","index","filter","subRace","length","name","handleRandomRace","results","randomRace","getRaceDetails","handleSelectedRace","race","useEffect","getAllRaces","subraces","register","e","target","value","map","errors","language_desc","languages","language","alignment","size_description"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { DeepMap, FieldError, UseFormRegister } from 'react-hook-form';\nimport { useAppDispatch } from '../../helpers/hooks';\nimport { commonActions } from '../../store/slices/common';\nimport { useAllRaces, useDetailedRace } from '../../store/selectors/common';\nimport { TEXT_COLOR_PRIMARY, TEXT_COLOR_SECONDARY } from '../styles';\nimport { handleRandomise } from '../../helpers/randomise';\nimport { APIReference, CommonModel, FormInputs } from '../../types';\n\ninterface RaceProps {\n  register: UseFormRegister<FormInputs>;\n  errors: DeepMap<FormInputs, FieldError>;\n}\n\nconst StyledStep = styled.div`\n  text-align: center;\n`;\n\nconst StyledStepsHeader = styled.h3`\n  text-align: center;\n  margin: 12px 0;\n`;\n\nconst StyledStepsSubheader = styled.h5`\n  text-align: center;\n  margin: 12px 0;\n`;\n\nconst StyledSelect = styled.select`\n  width: 200px;\n  height: 30px;\n  border-radius: 5px;\n  margin: 12px 0;\n`;\n\nconst StyledRandomiseButton = styled.a`\n  font-size: inherit;\n  color: ${TEXT_COLOR_SECONDARY};\n  &:hover {\n    cursor: pointer;\n    color: ${TEXT_COLOR_PRIMARY};\n  }\n`;\n\nconst StyledStepContainer = styled.div`\n  display: flex;\n`;\n\nconst StyledDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 65%;\n`;\n\nexport const Race: React.FC<RaceProps> = (props) => {\n  const dispatch = useAppDispatch();\n  const allRaces = useAllRaces();\n  const detailedRace = useDetailedRace();\n  const [allSubRaces, setAllSubRaces] = React.useState<\n    CommonModel[] | undefined\n  >([]);\n  const [selectedRace, setSelectedRace] = React.useState<\n    APIReference | undefined\n  >(undefined);\n  const [selectedSubRace, setSelectedSubRace] = React.useState<\n    APIReference | undefined\n  >(undefined);\n  const [displayRaceDetails, setDisplayRaceDetails] = React.useState(false);\n\n  const handleSelectedSubRace = (index: string) => {\n    const selectedSubRace = allSubRaces?.filter(\n      (subRace) => subRace.index === index\n    );\n    if (selectedSubRace && selectedSubRace.length > 0) {\n      setSelectedSubRace({\n        index: selectedSubRace[0].index,\n        name: selectedSubRace[0].name,\n      });\n    }\n  };\n\n  const handleRandomRace = () => {\n    if (allRaces?.results) {\n      const randomRace = handleRandomise(allRaces?.results);\n      setSelectedRace({ index: randomRace.index, name: randomRace.name });\n      dispatch(commonActions.getRaceDetails({ index: randomRace.index }));\n    }\n  };\n\n  const handleSelectedRace = (index: string) => {\n    const selectedRace = allRaces?.results.filter(\n      (race) => race.index === index\n    );\n    if (selectedRace && selectedRace.length > 0) {\n      setSelectedRace({\n        index: selectedRace[0].index,\n        name: selectedRace[0].name,\n      });\n      dispatch(commonActions.getRaceDetails({ index: selectedRace[0].index }));\n    }\n  };\n\n  React.useEffect(() => {\n    dispatch(commonActions.getAllRaces());\n  }, []);\n\n  React.useEffect(() => {\n    if (detailedRace?.subraces) {\n      setAllSubRaces(detailedRace?.subraces);\n      setDisplayRaceDetails(true);\n    }\n    // from here, we need to get the subraces object from the detailed race response and use that to populate the subraces dropdown\n  }, [detailedRace]);\n\n  return (\n    <>\n      <StyledStepContainer>\n        <StyledStep>\n          <StyledStepsHeader>Step One: Race</StyledStepsHeader>\n          <StyledStepsSubheader>\n            Select a race or{' '}\n            <StyledRandomiseButton onClick={() => handleRandomRace()}>\n              randomise\n            </StyledRandomiseButton>{' '}\n            it.\n          </StyledStepsSubheader>\n          <StyledSelect\n            value={selectedRace?.index}\n            {...props.register('race')}\n            onChange={(e) => {\n              handleSelectedRace(e.target.value);\n            }}\n          >\n            <option value=\"\" disabled>\n              - - - -\n            </option>\n            {allRaces &&\n              allRaces?.results?.map((race) => (\n                <option key={race.index} value={race.index}>\n                  {race.name}\n                </option>\n              ))}\n          </StyledSelect>\n\n          {props.errors.race && <span>This field is required</span>}\n        </StyledStep>\n        {detailedRace && displayRaceDetails && (\n          <StyledDetails>\n            <p>Languages: {detailedRace.language_desc}</p>\n            <ul>\n              {detailedRace.languages.map((language) => (\n                <li key={language.index}>{language.name}</li>\n              ))}\n            </ul>\n            <p>Alignment: {detailedRace.alignment}</p>\n            <p>Size: {detailedRace.size_description}</p>\n          </StyledDetails>\n        )}\n      </StyledStepContainer>\n      {allSubRaces && allSubRaces.length > 0 && (\n        <StyledStepContainer>\n          <StyledStep>\n            <StyledStepsSubheader>\n              Select a subrace (optional).\n            </StyledStepsSubheader>\n            <StyledSelect\n              value={selectedSubRace?.name}\n              {...props.register('subRace')}\n              onChange={(e) => {\n                handleSelectedSubRace(e.target.value);\n              }}\n            >\n              <option value=\"\" disabled>\n                - - - -\n              </option>\n              {allSubRaces.map((subRace) => (\n                <option key={subRace.index} value={subRace.index}>\n                  {subRace.name}\n                </option>\n              ))}\n            </StyledSelect>\n\n            {props.errors.subRace && <span>This field is required</span>}\n          </StyledStep>\n        </StyledStepContainer>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}