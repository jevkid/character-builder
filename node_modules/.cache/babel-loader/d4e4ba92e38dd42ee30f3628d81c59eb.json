{"ast":null,"code":"var _jsxFileName = \"/Users/meganjevin/Desktop/Code/character-builder/src/app/pages/characterBuilder.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { useAppDispatch } from '../../helpers/hooks';\nimport { commonActions } from '../../store/slices/common';\nimport { useAllRaces } from '../../store/selectors/common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCharacterBuilderContainer = styled.div``;\n_c = StyledCharacterBuilderContainer;\nconst StyledStepsContainer = styled.div``;\n_c2 = StyledStepsContainer;\nconst StyledStepsHeader = styled.h2``;\n_c3 = StyledStepsHeader;\nconst StyledSelect = styled.select``;\n_c4 = StyledSelect;\n// When page loads, animate into character builder component\n// When page loads, make a request to the API to get back all races\nexport const CharacterBuilder = () => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const allRaces = useAllRaces();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const onSubmit = data => console.log(data);\n\n  React.useEffect(() => {\n    dispatch(commonActions.getAllRaces());\n    console.log(allRaces);\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(StyledCharacterBuilderContainer, {\n    children: [\"Character builder\", /*#__PURE__*/_jsxDEV(StyledStepsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(StyledStepsHeader, {\n        children: \"Step One: Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(StyledSelect, {\n          defaultValue: \"test\",\n          ...register('race'),\n          children: allRaces && allRaces.map(race => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: race.name\n          }, race.index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), errors.raceRequired && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CharacterBuilder, \"y9SxmZOxv/hi+XrvuPL+dQdyKJs=\", false, function () {\n  return [useAppDispatch, useAllRaces, useForm];\n});\n\n_c5 = CharacterBuilder;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StyledCharacterBuilderContainer\");\n$RefreshReg$(_c2, \"StyledStepsContainer\");\n$RefreshReg$(_c3, \"StyledStepsHeader\");\n$RefreshReg$(_c4, \"StyledSelect\");\n$RefreshReg$(_c5, \"CharacterBuilder\");","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/app/pages/characterBuilder.tsx"],"names":["React","useForm","styled","useAppDispatch","commonActions","useAllRaces","StyledCharacterBuilderContainer","div","StyledStepsContainer","StyledStepsHeader","h2","StyledSelect","select","CharacterBuilder","dispatch","allRaces","register","handleSubmit","formState","errors","onSubmit","data","console","log","useEffect","getAllRaces","map","race","name","index","raceRequired"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAuC,iBAAvC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,8BAA5B;;AAEA,MAAMC,+BAA+B,GAAGJ,MAAM,CAACK,GAAI,EAAnD;KAAMD,+B;AAEN,MAAME,oBAAoB,GAAGN,MAAM,CAACK,GAAI,EAAxC;MAAMC,oB;AAEN,MAAMC,iBAAiB,GAAGP,MAAM,CAACQ,EAAG,EAApC;MAAMD,iB;AAEN,MAAME,YAAY,GAAGT,MAAM,CAACU,MAAO,EAAnC;MAAMD,Y;AAON;AACA;AAEA,OAAO,MAAME,gBAA0B,GAAG,MAAM;AAAA;;AAC9C,QAAMC,QAAQ,GAAGX,cAAc,EAA/B;AACA,QAAMY,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AACJW,IAAAA,QADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAHP,MAIFlB,OAAO,EAJX;;AAKA,QAAMmB,QAA+B,GAAIC,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAlD;;AAEArB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAM;AACpBV,IAAAA,QAAQ,CAACV,aAAa,CAACqB,WAAd,EAAD,CAAR;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AACD,GAHD,EAGG,CAACD,QAAD,CAHH;AAKA,sBACE,QAAC,+BAAD;AAAA,iDAEE,QAAC,oBAAD;AAAA,8BACE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,QAAQ,EAAEG,YAAY,CAACG,QAAD,CAA5B;AAAA,gCAEE,QAAC,YAAD;AAAc,UAAA,YAAY,EAAC,MAA3B;AAAA,aAAsCJ,QAAQ,CAAC,MAAD,CAA9C;AAAA,oBACGD,QAAQ,IACPA,QAAQ,CAACW,GAAT,CAAcC,IAAD,iBACX;AAAA,sBAA0BA,IAAI,CAACC;AAA/B,aAAaD,IAAI,CAACE,KAAlB;AAAA;AAAA;AAAA;AAAA,kBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAFF,EASGV,MAAM,CAACW,YAAP,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAT1B,eAUE;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAnCM;;GAAMjB,gB;UACMV,c,EACAE,W,EAKbJ,O;;;MAPOY,gB","sourcesContent":["import * as React from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { useAppDispatch } from '../../helpers/hooks';\nimport { commonActions } from '../../store/slices/common';\nimport { useAllRaces } from '../../store/selectors/common';\n\nconst StyledCharacterBuilderContainer = styled.div``;\n\nconst StyledStepsContainer = styled.div``;\n\nconst StyledStepsHeader = styled.h2``;\n\nconst StyledSelect = styled.select``;\n\ntype Inputs = {\n  race: string;\n  raceRequired: string;\n};\n\n// When page loads, animate into character builder component\n// When page loads, make a request to the API to get back all races\n\nexport const CharacterBuilder: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const allRaces = useAllRaces();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<Inputs>();\n  const onSubmit: SubmitHandler<Inputs> = (data) => console.log(data);\n\n  React.useEffect(() => {\n    dispatch(commonActions.getAllRaces());\n    console.log(allRaces);\n  }, [dispatch]);\n\n  return (\n    <StyledCharacterBuilderContainer>\n      Character builder\n      <StyledStepsContainer>\n        <StyledStepsHeader>Step One: Race</StyledStepsHeader>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          {/* register your input into the hook by invoking the \"register\" function */}\n          <StyledSelect defaultValue=\"test\" {...register('race')}>\n            {allRaces &&\n              allRaces.map((race) => (\n                <option key={race.index}>{race.name}</option>\n              ))}\n          </StyledSelect>\n          {/* errors will return when field validation fails  */}\n          {errors.raceRequired && <span>This field is required</span>}\n          <input type=\"submit\" />\n        </form>\n      </StyledStepsContainer>\n    </StyledCharacterBuilderContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}