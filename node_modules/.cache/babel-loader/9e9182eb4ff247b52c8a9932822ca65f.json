{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  races: {\n    loading: false,\n    error: false,\n    options: [],\n    subraces: {\n      loading: false,\n      error: false,\n      options: []\n    }\n  },\n  classes: {\n    loading: false,\n    error: false,\n    options: [],\n    subclasses: {\n      loading: false,\n      error: false,\n      options: []\n    }\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: []\n  }\n};\nconst SLICE_NAME = 'common';\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getAllRacesLoading: state => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: state => {\n      state.races.loading = false;\n      state.races.error = true;\n    }\n  }\n});\nexport const {\n  reducer: commonReducer\n} = commonSlice;\nexport const commonActions = { ...commonSlice.actions,\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`)\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/common.ts"],"names":["createAction","createSlice","initialState","races","loading","error","options","subraces","classes","subclasses","backgrounds","SLICE_NAME","commonSlice","name","reducers","getAllRacesLoading","state","getAllRacesSuccess","action","payload","getAllRacesFailure","reducer","commonReducer","commonActions","actions","getAllRaces"],"mappings":"AAAA,SAAwBA,YAAxB,EAAsCC,WAAtC,QAAyD,kBAAzD;AAoCA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,KAAK,EAAE,KAFF;AAGLC,IAAAA,OAAO,EAAE,EAHJ;AAILC,IAAAA,QAAQ,EAAE;AACRH,MAAAA,OAAO,EAAE,KADD;AAERC,MAAAA,KAAK,EAAE,KAFC;AAGRC,MAAAA,OAAO,EAAE;AAHD;AAJL,GADyB;AAWhCE,EAAAA,OAAO,EAAE;AACPJ,IAAAA,OAAO,EAAE,KADF;AAEPC,IAAAA,KAAK,EAAE,KAFA;AAGPC,IAAAA,OAAO,EAAE,EAHF;AAIPG,IAAAA,UAAU,EAAE;AACVL,MAAAA,OAAO,EAAE,KADC;AAEVC,MAAAA,KAAK,EAAE,KAFG;AAGVC,MAAAA,OAAO,EAAE;AAHC;AAJL,GAXuB;AAqBhCI,EAAAA,WAAW,EAAE;AACXN,IAAAA,OAAO,EAAE,KADE;AAEXC,IAAAA,KAAK,EAAE,KAFI;AAGXC,IAAAA,OAAO,EAAE;AAHE;AArBmB,CAAlC;AA4BA,MAAMK,UAAU,GAAG,QAAnB;AAEA,MAAMC,WAAW,GAAGX,WAAW,CAAC;AAC9BY,EAAAA,IAAI,EAAEF,UADwB;AAE9BT,EAAAA,YAF8B;AAG9BY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAGC,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACb,KAAN,CAAYC,OAAZ,GAAsB,IAAtB;AACD,KAHO;AAIRa,IAAAA,kBAAkB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAA0C;AAC5DF,MAAAA,KAAK,CAACb,KAAN,CAAYC,OAAZ,GAAsB,KAAtB;AACAY,MAAAA,KAAK,CAACb,KAAN,CAAYE,KAAZ,GAAoB,KAApB;AACAW,MAAAA,KAAK,CAACb,KAAN,CAAYG,OAAZ,GAAsBY,MAAM,CAACC,OAA7B;AACD,KARO;AASRC,IAAAA,kBAAkB,EAAGJ,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACb,KAAN,CAAYC,OAAZ,GAAsB,KAAtB;AACAY,MAAAA,KAAK,CAACb,KAAN,CAAYE,KAAZ,GAAoB,IAApB;AACD;AAZO;AAHoB,CAAD,CAA/B;AAmBA,OAAO,MAAM;AAAEgB,EAAAA,OAAO,EAAEC;AAAX,IAA6BV,WAAnC;AAEP,OAAO,MAAMW,aAAa,GAAG,EAC3B,GAAGX,WAAW,CAACY,OADY;AAG3BC,EAAAA,WAAW,EAAEzB,YAAY,CAAE,GAAEW,UAAW,cAAf;AAHE,CAAtB","sourcesContent":["import { PayloadAction, createAction, createSlice } from '@reduxjs/toolkit';\nimport { Race } from '../../types';\n\nexport interface CommonState {\n  races: {\n    loading: boolean;\n    error: boolean;\n    options: Race[];\n    selected?: string;\n    subraces?: {\n      loading: boolean;\n      error: boolean;\n      options: Race[];\n      selected?: string;\n    }\n  },\n  classes: {\n    loading: boolean;\n    error: boolean;\n    options: [];\n    selected?: string;\n    subclasses?: {\n      loading: boolean;\n      error: boolean;\n      options: Race[];\n      selected?: string;\n    }\n  },\n  backgrounds: {\n    loading: boolean;\n    error: boolean;\n    options: [];\n    selected?: string;\n  },\n}\n\nconst initialState: CommonState = {\n  races: {\n    loading: false,\n    error: false,\n    options: [],\n    subraces: {\n      loading: false,\n      error: false,\n      options: []\n    }\n  },\n  classes: {\n    loading: false,\n    error: false,\n    options: [],\n    subclasses: {\n      loading: false,\n      error: false,\n      options: []\n    }\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: []\n  },\n};\n\nconst SLICE_NAME = 'common';\n\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getAllRacesLoading: (state) => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action: PayloadAction<Race[]>) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: (state) => {\n      state.races.loading = false;\n      state.races.error = true;\n    },\n  },\n});\n\nexport const { reducer: commonReducer } = commonSlice;\n\nexport const commonActions = {\n  ...commonSlice.actions,\n\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`),\n};\n"]},"metadata":{},"sourceType":"module"}