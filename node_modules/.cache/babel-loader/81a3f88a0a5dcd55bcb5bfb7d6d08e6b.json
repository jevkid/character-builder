{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  loading: true\n};\nconst SLICE_NAME = 'glossary';\nconst valueAddSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getGlossarySuccess: state => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  reducer: valueAddReducer\n} = valueAddSlice;\nexport const valueAddActions = { ...valueAddSlice.actions,\n  getGlossary: createAction(`${SLICE_NAME}/getGlossary`, payload => ({\n    payload\n  }))\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/glossary.ts"],"names":["createAction","createSlice","initialState","loading","SLICE_NAME","valueAddSlice","name","reducers","getGlossarySuccess","state","reducer","valueAddReducer","valueAddActions","actions","getGlossary","payload"],"mappings":"AAAA,SAAwBA,YAAxB,EAAsCC,WAAtC,QAAyD,kBAAzD;AAMA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,OAAO,EAAE;AADyB,CAApC;AAIA,MAAMC,UAAU,GAAG,UAAnB;AAEA,MAAMC,aAAa,GAAGJ,WAAW,CAAC;AAChCK,EAAAA,IAAI,EAAEF,UAD0B;AAEhCF,EAAAA,YAFgC;AAGhCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAGC,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD;AAHO;AAHsB,CAAD,CAAjC;AAUA,OAAO,MAAM;AAAEO,EAAAA,OAAO,EAAEC;AAAX,IAA+BN,aAArC;AAEP,OAAO,MAAMO,eAAe,GAAG,EAC7B,GAAGP,aAAa,CAACQ,OADY;AAG7BC,EAAAA,WAAW,EAAEd,YAAY,CACtB,GAAEI,UAAW,cADS,EAEtBW,OAAD,KAAkC;AAChCA,IAAAA;AADgC,GAAlC,CAFuB;AAHI,CAAxB","sourcesContent":["import { PayloadAction, createAction, createSlice } from '@reduxjs/toolkit';\n\nexport interface GlossaryState {\n  loading: boolean;\n}\n\nconst initialState: GlossaryState = {\n  loading: true\n};\n\nconst SLICE_NAME = 'glossary';\n\nconst valueAddSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getGlossarySuccess: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { reducer: valueAddReducer } = valueAddSlice;\n\nexport const valueAddActions = {\n  ...valueAddSlice.actions,\n\n  getGlossary: createAction(\n    `${SLICE_NAME}/getGlossary`,\n    (payload: { character: any }) => ({\n      payload,\n    }),\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}