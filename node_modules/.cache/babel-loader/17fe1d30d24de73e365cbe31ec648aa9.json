{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  races: {\n    loading: false,\n    error: false\n  },\n  detailedRace: {\n    loading: false,\n    error: false\n  },\n  subRaces: {\n    loading: false,\n    error: false\n  },\n  classes: {\n    loading: false,\n    error: false\n  },\n  detailedClass: {\n    loading: false,\n    error: false\n  },\n  subClasses: {\n    loading: false,\n    error: false\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: []\n  }\n};\nconst SLICE_NAME = 'common';\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getDetailedRaceLoading: state => {\n      state.detailedRace.loading = true;\n    },\n    getDetailedRaceSuccess: (state, action) => {\n      state.detailedRace.loading = false;\n      state.detailedRace.error = false;\n      state.detailedRace.details = action.payload;\n    },\n    getDetailedRaceFailure: state => {\n      state.detailedRace.loading = false;\n      state.detailedRace.error = true;\n    },\n    getAllRacesLoading: state => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: state => {\n      state.races.loading = false;\n      state.races.error = true;\n    },\n    getAllSubRacesLoading: state => {\n      state.subRaces.loading = true;\n    },\n    getAllSubRacesSuccess: (state, action) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = false;\n      state.subRaces.options = action.payload;\n    },\n    getAllSubRacesFailure: state => {\n      state.subRaces.loading = false;\n      state.subRaces.error = true;\n    },\n    getAllClassesLoading: state => {\n      state.subRaces.loading = true;\n    },\n    getAllClassesSuccess: (state, action) => {\n      state.classes.loading = false;\n      state.classes.error = false;\n      state.classes.options = action.payload;\n    },\n    getAllClassesFailure: state => {\n      state.classes.loading = false;\n      state.classes.error = true;\n    },\n    getDetailedClassLoading: state => {\n      state.detailedClass.loading = true;\n    },\n    getDetailedClassSuccess: (state, action) => {\n      state.detailedClass.loading = false;\n      state.detailedClass.error = false;\n      state.detailedClass.details = action.payload;\n    },\n    getDetailedClassFailure: state => {\n      state.detailedClass.loading = false;\n      state.detailedClass.error = true;\n    },\n    getAllSubClassesLoading: state => {\n      state.subClasses.loading = true;\n    },\n    getAllSubClassesSuccess: (state, action) => {\n      state.subClasses.loading = false;\n      state.subClasses.error = false;\n      state.subClasses.options = action.payload;\n    },\n    getAllSubClassesFailure: state => {\n      state.subClasses.loading = false;\n      state.subClasses.error = true;\n    }\n  }\n});\nexport const {\n  reducer: commonReducer\n} = commonSlice;\nexport const commonActions = { ...commonSlice.actions,\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`),\n  getRaceDetails: createAction(`${SLICE_NAME}/getRaceDetails`, payload => ({\n    payload\n  })),\n  getAllSubRaces: createAction(`${SLICE_NAME}/getAllSubRaces`, payload => ({\n    payload\n  })),\n  getAllClasses: createAction(`${SLICE_NAME}/getAllClasses`),\n  getClassDetails: createAction(`${SLICE_NAME}/getClassDetails`, payload => ({\n    payload\n  })),\n  getAllSubClasses: createAction(`${SLICE_NAME}/getAllSubClasses`, payload => ({\n    payload\n  }))\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/common.ts"],"names":["createAction","createSlice","initialState","races","loading","error","detailedRace","subRaces","classes","detailedClass","subClasses","backgrounds","options","SLICE_NAME","commonSlice","name","reducers","getDetailedRaceLoading","state","getDetailedRaceSuccess","action","details","payload","getDetailedRaceFailure","getAllRacesLoading","getAllRacesSuccess","getAllRacesFailure","getAllSubRacesLoading","getAllSubRacesSuccess","getAllSubRacesFailure","getAllClassesLoading","getAllClassesSuccess","getAllClassesFailure","getDetailedClassLoading","getDetailedClassSuccess","getDetailedClassFailure","getAllSubClassesLoading","getAllSubClassesSuccess","getAllSubClassesFailure","reducer","commonReducer","commonActions","actions","getAllRaces","getRaceDetails","getAllSubRaces","getAllClasses","getClassDetails","getAllSubClasses"],"mappings":"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","sourcesContent":["import { PayloadAction, createAction, createSlice } from '@reduxjs/toolkit';\nimport { APIAllRacesResponse, APIAllSubRacesResponse, APIAllClassesResponse, APIAllSubClassesResponse } from '../../api/types';\nimport { Class, Race } from '../../types';\n\nexport interface CommonState {\n  races: {\n    loading: boolean;\n    error: boolean;\n    options?: APIAllRacesResponse;\n    selected?: string;\n  },\n  detailedRace: {\n    loading: boolean;\n    error: boolean;\n    details?: Race;\n  },\n  subRaces: {\n    loading: boolean;\n    error: boolean;\n    options?: APIAllSubRacesResponse;\n    selected?: string;\n  },\n  classes: {\n    loading: boolean;\n    error: boolean;\n    options?: APIAllClassesResponse;\n    selected?: string;\n  },\n  detailedClass: {\n    loading: boolean;\n    error: boolean;\n    details?: Race;\n  }\n  subClasses: {\n    loading: boolean;\n    error: boolean;\n    options?: APIAllSubClassesResponse;\n    selected?: string;\n  },\n  backgrounds: {\n    loading: boolean;\n    error: boolean;\n    options: [];\n    selected?: string;\n  },\n}\n\nconst initialState: CommonState = {\n  races: {\n    loading: false,\n    error: false,\n  },\n  detailedRace: {\n    loading: false,\n    error: false,\n  },\n  subRaces: {\n    loading: false,\n    error: false,\n  },\n  classes: {\n    loading: false,\n    error: false,\n  },\n  detailedClass: {\n    loading: false,\n    error: false,\n  },\n  subClasses: {\n    loading: false,\n    error: false,\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: [],\n  },\n};\n\nconst SLICE_NAME = 'common';\n\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getDetailedRaceLoading: (state) => {\n      state.detailedRace.loading = true;\n    },\n    getDetailedRaceSuccess: (state, action: PayloadAction<Race>) => {\n      state.detailedRace.loading = false;\n      state.detailedRace.error = false;\n      state.detailedRace.details = action.payload;\n    },\n    getDetailedRaceFailure: (state) => {\n      state.detailedRace.loading = false;\n      state.detailedRace.error = true;\n    },\n    getAllRacesLoading: (state) => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action: PayloadAction<APIAllRacesResponse>) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: (state) => {\n      state.races.loading = false;\n      state.races.error = true;\n    },\n    getAllSubRacesLoading: (state) => {\n      state.subRaces.loading = true;\n    },\n    getAllSubRacesSuccess: (state, action: PayloadAction<APIAllSubRacesResponse>) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = false;\n      state.subRaces.options = action.payload;\n    },\n    getAllSubRacesFailure: (state) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = true;\n    },\n    getAllClassesLoading: (state) => {\n      state.subRaces.loading = true;\n    },\n    getAllClassesSuccess: (state, action: PayloadAction<APIAllClassesResponse>) => {\n      state.classes.loading = false;\n      state.classes.error = false;\n      state.classes.options = action.payload;\n    },\n    getAllClassesFailure: (state) => {\n      state.classes.loading = false;\n      state.classes.error = true;\n    },\n    getDetailedClassLoading: (state) => {\n      state.detailedClass.loading = true;\n    },\n    getDetailedClassSuccess: (state, action: PayloadAction<Class>) => {\n      state.detailedClass.loading = false;\n      state.detailedClass.error = false;\n      state.detailedClass.details = action.payload;\n    },\n    getDetailedClassFailure: (state) => {\n      state.detailedClass.loading = false;\n      state.detailedClass.error = true;\n    },\n    getAllSubClassesLoading: (state) => {\n      state.subClasses.loading = true;\n    },\n    getAllSubClassesSuccess: (state, action: PayloadAction<APIAllSubClassesResponse>) => {\n      state.subClasses.loading = false;\n      state.subClasses.error = false;\n      state.subClasses.options = action.payload;\n    },\n    getAllSubClassesFailure: (state) => {\n      state.subClasses.loading = false;\n      state.subClasses.error = true;\n    },\n  },\n});\n\nexport const { reducer: commonReducer } = commonSlice;\n\nexport const commonActions = {\n  ...commonSlice.actions,\n\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`),\n  getRaceDetails: createAction(\n    `${SLICE_NAME}/getRaceDetails`,\n    (payload: { index: string }) => ({\n      payload,\n    }),\n  ),\n  getAllSubRaces: createAction(\n    `${SLICE_NAME}/getAllSubRaces`,\n    (payload: { index: string }) => ({\n      payload,\n    }),\n  ),\n  getAllClasses: createAction(`${SLICE_NAME}/getAllClasses`),\n  getClassDetails: createAction(\n    `${SLICE_NAME}/getClassDetails`,\n    (payload: { index: string }) => ({\n      payload,\n    }),\n  ),\n  getAllSubClasses: createAction(\n    `${SLICE_NAME}/getAllSubClasses`,\n    (payload: { index: string }) => ({\n      payload,\n    })\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}