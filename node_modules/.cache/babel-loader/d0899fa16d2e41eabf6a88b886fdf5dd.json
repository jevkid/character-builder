{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { characterBuilderReducer } from './slices/characterBuilder';\nimport { glossaryReducer } from './slices/glossary';\nimport { commonReducer } from './slices/common';\nimport { rootSaga } from './sagas';\nconst rootReducer = combineReducers({\n  characterBuilder: characterBuilderReducer,\n  glossary: glossaryReducer,\n  common: commonReducer\n});\nconst sagaMiddleware = createSagaMiddleware();\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware]\n});\nsagaMiddleware.run(rootSaga);\nexport const useAppDispatch = () => {\n  _s();\n\n  return useDispatch();\n};\n\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\n\nexport const useAppSelector = useSelector;\n\nconst makeStore = () => {\n  const nextSagaMiddleware = createSagaMiddleware();\n  const configuredStore = configureStore({\n    reducer: rootReducer,\n    middleware: [nextSagaMiddleware]\n  });\n  nextSagaMiddleware.run(rootSaga);\n  return configuredStore;\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/store.ts"],"names":["combineReducers","configureStore","useDispatch","useSelector","createSagaMiddleware","characterBuilderReducer","glossaryReducer","commonReducer","rootSaga","rootReducer","characterBuilder","glossary","common","sagaMiddleware","store","reducer","middleware","run","useAppDispatch","useAppSelector","makeStore","nextSagaMiddleware","configuredStore"],"mappings":";;AAAA,SAAwBA,eAAxB,EAAyCC,cAAzC,QAA+D,kBAA/D;AACA,SAA+BC,WAA/B,EAA4CC,WAA5C,QAA+D,aAA/D;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,MAAMC,WAAW,GAAGT,eAAe,CAAC;AAClCU,EAAAA,gBAAgB,EAAEL,uBADgB;AAEhCM,EAAAA,QAAQ,EAAEL,eAFsB;AAGhCM,EAAAA,MAAM,EAAEL;AAHwB,CAAD,CAAnC;AAMA,MAAMM,cAAc,GAAGT,oBAAoB,EAA3C;AAEA,OAAO,MAAMU,KAAK,GAAGb,cAAc,CAAC;AAClCc,EAAAA,OAAO,EAAEN,WADyB;AAElCO,EAAAA,UAAU,EAAE,CAACH,cAAD;AAFsB,CAAD,CAA5B;AAKPA,cAAc,CAACI,GAAf,CAAmBT,QAAnB;AAKA,OAAO,MAAMU,cAAc,GAAG;AAAA;;AAAA,SAAMhB,WAAW,EAAjB;AAAA,CAAvB;;GAAMgB,c;UAAuBhB,W;;;AACpC,OAAO,MAAMiB,cAA+C,GAAGhB,WAAxD;;AAEP,MAAMiB,SAAS,GAAG,MAAM;AACtB,QAAMC,kBAAkB,GAAGjB,oBAAoB,EAA/C;AACA,QAAMkB,eAAe,GAAGrB,cAAc,CAAC;AACrCc,IAAAA,OAAO,EAAEN,WAD4B;AAErCO,IAAAA,UAAU,EAAE,CAACK,kBAAD;AAFyB,GAAD,CAAtC;AAIAA,EAAAA,kBAAkB,CAACJ,GAAnB,CAAuBT,QAAvB;AACA,SAAOc,eAAP;AACD,CARD","sourcesContent":["import { PayloadAction, combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { characterBuilderReducer } from './slices/characterBuilder';\nimport { glossaryReducer } from './slices/glossary';\nimport { commonReducer } from './slices/common';\nimport { rootSaga } from './sagas';\n\nconst rootReducer = combineReducers({\n  characterBuilder: characterBuilderReducer,\n    glossary: glossaryReducer,\n    common: commonReducer,\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nconst makeStore = () => {\n  const nextSagaMiddleware = createSagaMiddleware();\n  const configuredStore = configureStore({\n    reducer: rootReducer,\n    middleware: [nextSagaMiddleware],\n  });\n  nextSagaMiddleware.run(rootSaga);\n  return configuredStore;\n};\n\nexport type AppStore = ReturnType<typeof makeStore>;\nexport type AppState = ReturnType<AppStore['getState']>;"]},"metadata":{},"sourceType":"module"}