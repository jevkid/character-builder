{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  races: {\n    loading: false,\n    error: false,\n    options: []\n  },\n  subRaces: {\n    loading: false,\n    error: false,\n    options: []\n  },\n  classes: {\n    loading: false,\n    error: false,\n    options: []\n  },\n  subclasses: {\n    loading: false,\n    error: false,\n    options: []\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: []\n  }\n};\nconst SLICE_NAME = 'common';\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getAllRacesLoading: state => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: state => {\n      state.races.loading = false;\n      state.races.error = true;\n    },\n    getAllSubRacesLoading: state => {\n      state.subRaces.loading = true;\n    },\n    getAllSubRacesSuccess: (state, action) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = false;\n      state.subRaces.options = action.payload;\n    },\n    getAllSubRacesFailure: state => {\n      state.subRaces.loading = false;\n      state.subRaces.error = true;\n    }\n  }\n});\nexport const {\n  reducer: commonReducer\n} = commonSlice;\nexport const commonActions = { ...commonSlice.actions,\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`),\n  getAllSubRaces: createAction(`${SLICE_NAME}/getAllSubRaces`)\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/common.ts"],"names":["createAction","createSlice","initialState","races","loading","error","options","subRaces","classes","subclasses","backgrounds","SLICE_NAME","commonSlice","name","reducers","getAllRacesLoading","state","getAllRacesSuccess","action","payload","getAllRacesFailure","getAllSubRacesLoading","getAllSubRacesSuccess","getAllSubRacesFailure","reducer","commonReducer","commonActions","actions","getAllRaces","getAllSubRaces"],"mappings":"AAAA,SAAwBA,YAAxB,EAAsCC,WAAtC,QAAyD,kBAAzD;AAoCA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,KAAK,EAAE,KAFF;AAGLC,IAAAA,OAAO,EAAE;AAHJ,GADyB;AAMhCC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,OAAO,EAAE,KADD;AAERC,IAAAA,KAAK,EAAE,KAFC;AAGRC,IAAAA,OAAO,EAAE;AAHD,GANsB;AAWhCE,EAAAA,OAAO,EAAE;AACPJ,IAAAA,OAAO,EAAE,KADF;AAEPC,IAAAA,KAAK,EAAE,KAFA;AAGPC,IAAAA,OAAO,EAAE;AAHF,GAXuB;AAgBhCG,EAAAA,UAAU,EAAE;AACVL,IAAAA,OAAO,EAAE,KADC;AAEVC,IAAAA,KAAK,EAAE,KAFG;AAGVC,IAAAA,OAAO,EAAE;AAHC,GAhBoB;AAqBhCI,EAAAA,WAAW,EAAE;AACXN,IAAAA,OAAO,EAAE,KADE;AAEXC,IAAAA,KAAK,EAAE,KAFI;AAGXC,IAAAA,OAAO,EAAE;AAHE;AArBmB,CAAlC;AA4BA,MAAMK,UAAU,GAAG,QAAnB;AAEA,MAAMC,WAAW,GAAGX,WAAW,CAAC;AAC9BY,EAAAA,IAAI,EAAEF,UADwB;AAE9BT,EAAAA,YAF8B;AAG9BY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAGC,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACb,KAAN,CAAYC,OAAZ,GAAsB,IAAtB;AACD,KAHO;AAIRa,IAAAA,kBAAkB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAA0C;AAC5DF,MAAAA,KAAK,CAACb,KAAN,CAAYC,OAAZ,GAAsB,KAAtB;AACAY,MAAAA,KAAK,CAACb,KAAN,CAAYE,KAAZ,GAAoB,KAApB;AACAW,MAAAA,KAAK,CAACb,KAAN,CAAYG,OAAZ,GAAsBY,MAAM,CAACC,OAA7B;AACD,KARO;AASRC,IAAAA,kBAAkB,EAAGJ,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACb,KAAN,CAAYC,OAAZ,GAAsB,KAAtB;AACAY,MAAAA,KAAK,CAACb,KAAN,CAAYE,KAAZ,GAAoB,IAApB;AACD,KAZO;AAaRgB,IAAAA,qBAAqB,EAAGL,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACT,QAAN,CAAeH,OAAf,GAAyB,IAAzB;AACD,KAfO;AAgBRkB,IAAAA,qBAAqB,EAAE,CAACN,KAAD,EAAQE,MAAR,KAA0C;AAC/DF,MAAAA,KAAK,CAACT,QAAN,CAAeH,OAAf,GAAyB,KAAzB;AACAY,MAAAA,KAAK,CAACT,QAAN,CAAeF,KAAf,GAAuB,KAAvB;AACAW,MAAAA,KAAK,CAACT,QAAN,CAAeD,OAAf,GAAyBY,MAAM,CAACC,OAAhC;AACD,KApBO;AAqBRI,IAAAA,qBAAqB,EAAGP,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACT,QAAN,CAAeH,OAAf,GAAyB,KAAzB;AACAY,MAAAA,KAAK,CAACT,QAAN,CAAeF,KAAf,GAAuB,IAAvB;AACD;AAxBO;AAHoB,CAAD,CAA/B;AA+BA,OAAO,MAAM;AAAEmB,EAAAA,OAAO,EAAEC;AAAX,IAA6Bb,WAAnC;AAEP,OAAO,MAAMc,aAAa,GAAG,EAC3B,GAAGd,WAAW,CAACe,OADY;AAG3BC,EAAAA,WAAW,EAAE5B,YAAY,CAAE,GAAEW,UAAW,cAAf,CAHE;AAI3BkB,EAAAA,cAAc,EAAE7B,YAAY,CAAE,GAAEW,UAAW,iBAAf;AAJD,CAAtB","sourcesContent":["import { PayloadAction, createAction, createSlice } from '@reduxjs/toolkit';\nimport { Race } from '../../types';\n\nexport interface CommonState {\n  races: {\n    loading: boolean;\n    error: boolean;\n    options: Race[];\n    selected?: string;\n  },\n  subRaces: {\n    loading: boolean;\n    error: boolean;\n    options: Race[];\n    selected?: string;\n  },\n  classes: {\n    loading: boolean;\n    error: boolean;\n    options: [];\n    selected?: string;\n  },\n  subclasses?: {\n    loading: boolean;\n    error: boolean;\n    options: Race[];\n    selected?: string;\n  },\n  backgrounds: {\n    loading: boolean;\n    error: boolean;\n    options: [];\n    selected?: string;\n  },\n}\n\nconst initialState: CommonState = {\n  races: {\n    loading: false,\n    error: false,\n    options: [],\n  },\n  subRaces: {\n    loading: false,\n    error: false,\n    options: []\n  },\n  classes: {\n    loading: false,\n    error: false,\n    options: [],\n  },\n  subclasses: {\n    loading: false,\n    error: false,\n    options: []\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: []\n  },\n};\n\nconst SLICE_NAME = 'common';\n\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getAllRacesLoading: (state) => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action: PayloadAction<Race[]>) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: (state) => {\n      state.races.loading = false;\n      state.races.error = true;\n    },\n    getAllSubRacesLoading: (state) => {\n      state.subRaces.loading = true;\n    },\n    getAllSubRacesSuccess: (state, action: PayloadAction<Race[]>) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = false;\n      state.subRaces.options = action.payload;\n    },\n    getAllSubRacesFailure: (state) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = true;\n    },\n  },\n});\n\nexport const { reducer: commonReducer } = commonSlice;\n\nexport const commonActions = {\n  ...commonSlice.actions,\n\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`),\n  getAllSubRaces: createAction(`${SLICE_NAME}/getAllSubRaces`),\n};\n"]},"metadata":{},"sourceType":"module"}