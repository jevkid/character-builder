{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit'; // set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n\nconst initialState = {\n  loading: true\n};\nconst SLICE_NAME = 'characterBuilder';\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getCharacterBuilderSuccess: state => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  reducer: characterBuilderReducer\n} = characterBuilderSlice;\nexport const characterBuilderActions = { ...characterBuilderSlice.actions,\n  getCharacterBuilder: createAction(`${SLICE_NAME}/getCharacterBuilder`, payload => ({\n    payload\n  }))\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/characterBuilder.ts"],"names":["createAction","createSlice","initialState","loading","SLICE_NAME","characterBuilderSlice","name","reducers","getCharacterBuilderSuccess","state","reducer","characterBuilderReducer","characterBuilderActions","actions","getCharacterBuilder","payload"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,QAA0C,kBAA1C,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAOA,MAAMC,YAAmC,GAAG;AAC1CC,EAAAA,OAAO,EAAE;AADiC,CAA5C;AAIA,MAAMC,UAAU,GAAG,kBAAnB;AAEA,MAAMC,qBAAqB,GAAGJ,WAAW,CAAC;AACxCK,EAAAA,IAAI,EAAEF,UADkC;AAExCF,EAAAA,YAFwC;AAGxCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,0BAA0B,EAAGC,KAAD,IAAW;AACrCA,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD;AAHO;AAH8B,CAAD,CAAzC;AAUA,OAAO,MAAM;AAAEO,EAAAA,OAAO,EAAEC;AAAX,IAAuCN,qBAA7C;AAEP,OAAO,MAAMO,uBAAuB,GAAG,EACrC,GAAGP,qBAAqB,CAACQ,OADY;AAGrCC,EAAAA,mBAAmB,EAAEd,YAAY,CAC9B,GAAEI,UAAW,sBADiB,EAE9BW,OAAD,KAAkC;AAChCA,IAAAA;AADgC,GAAlC,CAF+B;AAHI,CAAhC","sourcesContent":["import { createAction, createSlice } from '@reduxjs/toolkit';\n\n// set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n\n\nexport interface CharacterBuilderState {\n  loading: boolean;\n}\n\nconst initialState: CharacterBuilderState = {\n  loading: true\n};\n\nconst SLICE_NAME = 'characterBuilder';\n\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getCharacterBuilderSuccess: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { reducer: characterBuilderReducer } = characterBuilderSlice;\n\nexport const characterBuilderActions = {\n  ...characterBuilderSlice.actions,\n\n  getCharacterBuilder: createAction(\n    `${SLICE_NAME}/getCharacterBuilder`,\n    (payload: { character: any }) => ({\n      payload,\n    }),\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}