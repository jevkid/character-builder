{"ast":null,"code":"var _jsxFileName = \"/Users/meganjevin/Desktop/Code/character-builder/src/app/components/subrace.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { useAppDispatch } from '../../helpers/hooks';\nimport { useAllSubRaces } from '../../store/selectors/common';\nimport { TEXT_COLOR_PRIMARY, TEXT_COLOR_SECONDARY } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledStep = styled.div`\n  text-align: center;\n`;\n_c = StyledStep;\nconst StyledStepsSubheader = styled.h5`\n  text-align: center;\n  margin: 12px 0;\n`;\n_c2 = StyledStepsSubheader;\nconst StyledSelect = styled.select`\n  width: 200px;\n  height: 30px;\n  border-radius: 5px;\n  margin: 12px 0;\n`;\n_c3 = StyledSelect;\nconst StyledRandomiseButton = styled.a`\n  font-size: inherit;\n  color: ${TEXT_COLOR_SECONDARY};\n  &:hover {\n    cursor: pointer;\n    color: ${TEXT_COLOR_PRIMARY};\n  }\n`;\n_c4 = StyledRandomiseButton;\nexport const Subrace = props => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const allSubRaces = useAllSubRaces();\n  const [selectedSubRace, setSelectedSubRace] = React.useState(undefined);\n\n  const handleSelectedSubRace = index => {\n    const selectedSubRace = allSubRaces === null || allSubRaces === void 0 ? void 0 : allSubRaces.results.filter(subRace => subRace.index === index);\n\n    if (selectedSubRace && selectedSubRace.length > 0) {\n      setSelectedSubRace({\n        index: selectedSubRace[0].index,\n        name: selectedSubRace[0].name\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledStep, {\n    children: [/*#__PURE__*/_jsxDEV(StyledStepsSubheader, {\n      children: [\"Select a subrace or\", ' ', /*#__PURE__*/_jsxDEV(StyledRandomiseButton, {\n        onClick: () => console.log('happens'),\n        children: \"randomise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), ' ', \"it.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledSelect, {\n      value: selectedSubRace === null || selectedSubRace === void 0 ? void 0 : selectedSubRace.name,\n      ...props.register('subRace'),\n      onChange: e => {\n        handleSelectedSubRace(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        selected: true,\n        disabled: true,\n        children: \"- - - -\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), allSubRaces && allSubRaces.results.map(subRace => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: subRace.index,\n        children: subRace.name\n      }, subRace.index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), props.errors.subRace && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"This field is required\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Subrace, \"zeJ9dtpEIKtF+iPBncgSo/HlKM0=\", false, function () {\n  return [useAppDispatch, useAllSubRaces];\n});\n\n_c5 = Subrace;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StyledStep\");\n$RefreshReg$(_c2, \"StyledStepsSubheader\");\n$RefreshReg$(_c3, \"StyledSelect\");\n$RefreshReg$(_c4, \"StyledRandomiseButton\");\n$RefreshReg$(_c5, \"Subrace\");","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/app/components/subrace.tsx"],"names":["React","styled","useAppDispatch","useAllSubRaces","TEXT_COLOR_PRIMARY","TEXT_COLOR_SECONDARY","StyledStep","div","StyledStepsSubheader","h5","StyledSelect","select","StyledRandomiseButton","a","Subrace","props","dispatch","allSubRaces","selectedSubRace","setSelectedSubRace","useState","undefined","handleSelectedSubRace","index","results","filter","subRace","length","name","console","log","register","e","target","value","map","errors"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,QAAyD,WAAzD;;AAOA,MAAMC,UAAU,GAAGL,MAAM,CAACM,GAAI;AAC9B;AACA,CAFA;KAAMD,U;AAIN,MAAME,oBAAoB,GAAGP,MAAM,CAACQ,EAAG;AACvC;AACA;AACA,CAHA;MAAMD,oB;AAKN,MAAME,YAAY,GAAGT,MAAM,CAACU,MAAO;AACnC;AACA;AACA;AACA;AACA,CALA;MAAMD,Y;AAON,MAAME,qBAAqB,GAAGX,MAAM,CAACY,CAAE;AACvC;AACA,WAAWR,oBAAqB;AAChC;AACA;AACA,aAAaD,kBAAmB;AAChC;AACA,CAPA;MAAMQ,qB;AAqBN,OAAO,MAAME,OAA+B,GAAIC,KAAD,IAAW;AAAA;;AACxD,QAAMC,QAAQ,GAAGd,cAAc,EAA/B;AACA,QAAMe,WAAW,GAAGd,cAAc,EAAlC;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwCnB,KAAK,CAACoB,QAAN,CAE5CC,SAF4C,CAA9C;;AAIA,QAAMC,qBAAqB,GAAIC,KAAD,IAAmB;AAC/C,UAAML,eAAe,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEO,OAAb,CAAqBC,MAArB,CACrBC,OAAD,IAAaA,OAAO,CAACH,KAAR,KAAkBA,KADT,CAAxB;;AAGA,QAAIL,eAAe,IAAIA,eAAe,CAACS,MAAhB,GAAyB,CAAhD,EAAmD;AACjDR,MAAAA,kBAAkB,CAAC;AACjBI,QAAAA,KAAK,EAAEL,eAAe,CAAC,CAAD,CAAf,CAAmBK,KADT;AAEjBK,QAAAA,IAAI,EAAEV,eAAe,CAAC,CAAD,CAAf,CAAmBU;AAFR,OAAD,CAAlB;AAID;AACF,GAVD;;AAYA,sBACE,QAAC,UAAD;AAAA,4BACE,QAAC,oBAAD;AAAA,wCACsB,GADtB,eAEE,QAAC,qBAAD;AAAuB,QAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAI2B,GAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEZ,eAAF,aAAEA,eAAF,uBAAEA,eAAe,CAAEU,IAD1B;AAAA,SAEMb,KAAK,CAACgB,QAAN,CAAe,SAAf,CAFN;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACfV,QAAAA,qBAAqB,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAArB;AACD,OALH;AAAA,8BAOE;AAAQ,QAAA,KAAK,EAAC,EAAd;AAAiB,QAAA,QAAQ,MAAzB;AAA0B,QAAA,QAAQ,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,EAUGjB,WAAW,IACVA,WAAW,CAACO,OAAZ,CAAoBW,GAApB,CAAyBT,OAAD,iBACtB;AAA4B,QAAA,KAAK,EAAEA,OAAO,CAACH,KAA3C;AAAA,kBACGG,OAAO,CAACE;AADX,SAAaF,OAAO,CAACH,KAArB;AAAA;AAAA;AAAA;AAAA,cADF,CAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EA0BGR,KAAK,CAACqB,MAAN,CAAaV,OAAb,iBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1B3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAjDM;;GAAMZ,O;UACMZ,c,EACGC,c;;;MAFTW,O","sourcesContent":["import * as React from 'react';\nimport { DeepMap, FieldError, UseFormRegister } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { useAppDispatch } from '../../helpers/hooks';\nimport { useAllSubRaces } from '../../store/selectors/common';\nimport { TEXT_COLOR_PRIMARY, TEXT_COLOR_SECONDARY } from '../styles';\n\ninterface SubRaceProps {\n  register: UseFormRegister<FormInputs>;\n  errors: DeepMap<FormInputs, FieldError>;\n}\n\nconst StyledStep = styled.div`\n  text-align: center;\n`;\n\nconst StyledStepsSubheader = styled.h5`\n  text-align: center;\n  margin: 12px 0;\n`;\n\nconst StyledSelect = styled.select`\n  width: 200px;\n  height: 30px;\n  border-radius: 5px;\n  margin: 12px 0;\n`;\n\nconst StyledRandomiseButton = styled.a`\n  font-size: inherit;\n  color: ${TEXT_COLOR_SECONDARY};\n  &:hover {\n    cursor: pointer;\n    color: ${TEXT_COLOR_PRIMARY};\n  }\n`;\n\ninterface FormInputs {\n  race: string;\n  subRace: string;\n  class: string;\n  subClass: string;\n}\n\ninterface APIReference {\n  index: string;\n  name: string;\n}\n\nexport const Subrace: React.FC<SubRaceProps> = (props) => {\n  const dispatch = useAppDispatch();\n  const allSubRaces = useAllSubRaces();\n  const [selectedSubRace, setSelectedSubRace] = React.useState<\n    APIReference | undefined\n  >(undefined);\n\n  const handleSelectedSubRace = (index: string) => {\n    const selectedSubRace = allSubRaces?.results.filter(\n      (subRace) => subRace.index === index\n    );\n    if (selectedSubRace && selectedSubRace.length > 0) {\n      setSelectedSubRace({\n        index: selectedSubRace[0].index,\n        name: selectedSubRace[0].name,\n      });\n    }\n  };\n\n  return (\n    <StyledStep>\n      <StyledStepsSubheader>\n        Select a subrace or{' '}\n        <StyledRandomiseButton onClick={() => console.log('happens')}>\n          randomise\n        </StyledRandomiseButton>{' '}\n        it.\n      </StyledStepsSubheader>\n      <StyledSelect\n        value={selectedSubRace?.name}\n        {...props.register('subRace')}\n        onChange={(e) => {\n          handleSelectedSubRace(e.target.value);\n        }}\n      >\n        <option value=\"\" selected disabled>\n          - - - -\n        </option>\n        {allSubRaces &&\n          allSubRaces.results.map((subRace) => (\n            <option key={subRace.index} value={subRace.index}>\n              {subRace.name}\n            </option>\n          ))}\n      </StyledSelect>\n\n      {props.errors.subRace && <span>This field is required</span>}\n    </StyledStep>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}