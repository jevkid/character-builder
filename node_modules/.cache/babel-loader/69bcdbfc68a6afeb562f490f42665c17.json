{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit'; // set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n// save form\n\nconst initialState = {};\nconst SLICE_NAME = 'characterBuilder';\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    setSelectedRaceToState: (state, action) => {\n      state.selectedRace = action.payload;\n    },\n    setSelectedSubraceToState: (state, action) => {\n      state.selectedSubrace = action.payload;\n    },\n    setSelectedClassToState: (state, action) => {\n      state.selectedClass = action.payload;\n    },\n    setSelectedSubclassToState: (state, action) => {\n      state.selectedSubclass = action.payload;\n    }\n  }\n});\nexport const {\n  reducer: characterBuilderReducer\n} = characterBuilderSlice;\nexport const characterBuilderActions = { ...characterBuilderSlice.actions,\n  setSelectedRaceToState: createAction(`${SLICE_NAME}/setSelectedRaceToState`, payload => ({\n    payload\n  })),\n  setSelectedSubraceToState: createAction(`${SLICE_NAME}/setSelectedSubraceToState`, payload => ({\n    payload\n  })),\n  setSelectedClassToState: createAction(`${SLICE_NAME}/setSelectedClassToState`, payload => ({\n    payload\n  })),\n  setSelectedSubclassToState: createAction(`${SLICE_NAME}/setSelectedSubclassToState`, payload => ({\n    payload\n  }))\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/characterBuilder.ts"],"names":["createAction","createSlice","initialState","SLICE_NAME","characterBuilderSlice","name","reducers","setSelectedRaceToState","state","action","selectedRace","payload","setSelectedSubraceToState","selectedSubrace","setSelectedClassToState","selectedClass","setSelectedSubclassToState","selectedSubclass","reducer","characterBuilderReducer","characterBuilderActions","actions"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,QAAyD,kBAAzD,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8BA,MAAMC,YAAmC,GAAG,EAA5C;AAIA,MAAMC,UAAU,GAAG,kBAAnB;AAEA,MAAMC,qBAAqB,GAAGH,WAAW,CAAC;AACxCI,EAAAA,IAAI,EAAEF,UADkC;AAExCD,EAAAA,YAFwC;AAGxCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,sBAAsB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAChED,MAAAA,KAAK,CAACE,YAAN,GAAqBD,MAAM,CAACE,OAA5B;AACD,KAHO;AAIRC,IAAAA,yBAAyB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA0C;AACnED,MAAAA,KAAK,CAACK,eAAN,GAAwBJ,MAAM,CAACE,OAA/B;AACD,KANO;AAORG,IAAAA,uBAAuB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAA0C;AACjED,MAAAA,KAAK,CAACO,aAAN,GAAsBN,MAAM,CAACE,OAA7B;AACD,KATO;AAURK,IAAAA,0BAA0B,EAAE,CAACR,KAAD,EAAQC,MAAR,KAA0C;AACpED,MAAAA,KAAK,CAACS,gBAAN,GAAyBR,MAAM,CAACE,OAAhC;AACD;AAZO;AAH8B,CAAD,CAAzC;AAmBA,OAAO,MAAM;AAAEO,EAAAA,OAAO,EAAEC;AAAX,IAAuCf,qBAA7C;AAEP,OAAO,MAAMgB,uBAAuB,GAAG,EACrC,GAAGhB,qBAAqB,CAACiB,OADY;AAGrCd,EAAAA,sBAAsB,EAAEP,YAAY,CACjC,GAAEG,UAAW,yBADoB,EAEjCQ,OAAD,KAAgC;AAC9BA,IAAAA;AAD8B,GAAhC,CAFkC,CAHC;AASrCC,EAAAA,yBAAyB,EAAEZ,YAAY,CACpC,GAAEG,UAAW,4BADuB,EAEpCQ,OAAD,KAAmC;AACjCA,IAAAA;AADiC,GAAnC,CAFqC,CATF;AAerCG,EAAAA,uBAAuB,EAAEd,YAAY,CAClC,GAAEG,UAAW,0BADqB,EAElCQ,OAAD,KAAiC;AAC/BA,IAAAA;AAD+B,GAAjC,CAFmC,CAfA;AAqBrCK,EAAAA,0BAA0B,EAAEhB,YAAY,CACrC,GAAEG,UAAW,6BADwB,EAErCQ,OAAD,KAAoC;AAClCA,IAAAA;AADkC,GAApC,CAFsC;AArBH,CAAhC","sourcesContent":["import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n// save form\n\n\nexport interface CharacterBuilderState {\n  selectedRace?: {\n    selected: string;\n    pending: boolean;\n    success: boolean;\n    failure: boolean;\n  };\n  selectedSubrace?: {\n    selected: string;\n    pending: boolean;\n    success: boolean;\n    failure: boolean;\n  };\n  selectedClass?: {\n    selected: string;\n    pending: boolean;\n    success: boolean;\n    failure: boolean;\n  };\n  selectedSubclass?: {\n    selected: string;\n    pending: boolean;\n    success: boolean;\n    failure: boolean;\n  };\n}\n\nconst initialState: CharacterBuilderState = {\n\n};\n\nconst SLICE_NAME = 'characterBuilder';\n\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    setSelectedRaceToState: (state, action: PayloadAction<string>) => {\n      state.selectedRace = action.payload;\n    },\n    setSelectedSubraceToState: (state, action: PayloadAction<string>) => {\n      state.selectedSubrace = action.payload;\n    },\n    setSelectedClassToState: (state, action: PayloadAction<string>) => {\n      state.selectedClass = action.payload;\n    },\n    setSelectedSubclassToState: (state, action: PayloadAction<string>) => {\n      state.selectedSubclass = action.payload;\n    },\n  },\n});\n\nexport const { reducer: characterBuilderReducer } = characterBuilderSlice;\n\nexport const characterBuilderActions = {\n  ...characterBuilderSlice.actions,\n\n  setSelectedRaceToState: createAction(\n    `${SLICE_NAME}/setSelectedRaceToState`,\n    (payload: { race: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedSubraceToState: createAction(\n    `${SLICE_NAME}/setSelectedSubraceToState`,\n    (payload: { subrace: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedClassToState: createAction(\n    `${SLICE_NAME}/setSelectedClassToState`,\n    (payload: { class: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedSubclassToState: createAction(\n    `${SLICE_NAME}/setSelectedSubclassToState`,\n    (payload: { subclass: string }) => ({\n      payload,\n    }),\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}