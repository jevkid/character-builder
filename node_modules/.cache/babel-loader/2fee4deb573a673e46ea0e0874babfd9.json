{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { characterBuilderReducer } from './slices/characterBuilder';\nimport { glossaryReducer } from './slices/glossary';\nconst store = configureStore({\n  reducer: {\n    characterBuilder: characterBuilderReducer,\n    glossary: glossaryReducer\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/store.ts"],"names":["configureStore","characterBuilderReducer","glossaryReducer","store","reducer","characterBuilder","glossary"],"mappings":"AAAA,SAASA,cAAT,QAAoD,kBAApD;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,MAAMC,KAAK,GAAGH,cAAc,CAAC;AAC3BI,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBAAgB,EAAEJ,uBADX;AAEPK,IAAAA,QAAQ,EAAEJ;AAFH;AADkB,CAAD,CAA5B;AAOA,eAAeC,KAAf","sourcesContent":["import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { characterBuilderReducer } from './slices/characterBuilder';\nimport { glossaryReducer } from './slices/glossary';\n\nconst store = configureStore({\n  reducer: {\n    characterBuilder: characterBuilderReducer,\n    glossary: glossaryReducer,\n  },\n})\n\nexport default store;\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n"]},"metadata":{},"sourceType":"module"}