{"ast":null,"code":"// At some point would be good to re-type these to hold the specific traits they can be...\nexport let RaceEnum;\n\n(function (RaceEnum) {\n  RaceEnum[\"dragonborn\"] = \"Dragonborn\";\n  RaceEnum[\"dwarf\"] = \"Dwarf\";\n  RaceEnum[\"elf\"] = \"Elf\";\n  RaceEnum[\"gnome\"] = \"Gnome\";\n  RaceEnum[\"half-elf\"] = \"Half-Elf\";\n  RaceEnum[\"half-orc\"] = \"Half-Orc\";\n  RaceEnum[\"halfling\"] = \"Halfling\";\n  RaceEnum[\"human\"] = \"Human\";\n  RaceEnum[\"tiefling\"] = \"Tiefling\";\n})(RaceEnum || (RaceEnum = {}));\n\nexport let ClassEnum;\n\n(function (ClassEnum) {\n  ClassEnum[\"barbarian\"] = \"Barbarian\";\n  ClassEnum[\"bard\"] = \"Bard\";\n  ClassEnum[\"cleric\"] = \"Cleric\";\n  ClassEnum[\"druid\"] = \"Druid\";\n  ClassEnum[\"fighter\"] = \"Fighter\";\n  ClassEnum[\"monk\"] = \"Monk\";\n  ClassEnum[\"paladin\"] = \"Paladin\";\n  ClassEnum[\"ranger\"] = \"Ranger\";\n  ClassEnum[\"rogue\"] = \"Rogue\";\n  ClassEnum[\"sorcerer\"] = \"Sorcerer\";\n  ClassEnum[\"warlock\"] = \"Warlock\";\n  ClassEnum[\"wizard\"] = \"Wizard\";\n})(ClassEnum || (ClassEnum = {}));\n\nexport let AbilityMapEnum;\n\n(function (AbilityMapEnum) {\n  AbilityMapEnum[\"CON\"] = \"Constitution\";\n  AbilityMapEnum[\"DEX\"] = \"Dexterity\";\n  AbilityMapEnum[\"STR\"] = \"Strength\";\n  AbilityMapEnum[\"INT\"] = \"Intelligence\";\n  AbilityMapEnum[\"WIS\"] = \"Wisdom\";\n  AbilityMapEnum[\"CHA\"] = \"Charisma\";\n})(AbilityMapEnum || (AbilityMapEnum = {}));\n\nexport let AbilityMapEnumShort;\n\n(function (AbilityMapEnumShort) {\n  AbilityMapEnumShort[\"constitution\"] = \"CON\";\n  AbilityMapEnumShort[\"dexterity\"] = \"DEX\";\n  AbilityMapEnumShort[\"strength\"] = \"STR\";\n  AbilityMapEnumShort[\"intelligence\"] = \"INT\";\n  AbilityMapEnumShort[\"wisdom\"] = \"WIS\";\n  AbilityMapEnumShort[\"charisma\"] = \"CHA\";\n})(AbilityMapEnumShort || (AbilityMapEnumShort = {}));\n\n;\n;","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/types.ts"],"names":["RaceEnum","ClassEnum","AbilityMapEnum","AbilityMapEnumShort"],"mappings":"AA2IA;AA4CA,WAAYA,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAYZ,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAeZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AASZ,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAoDX;AAMA","sourcesContent":["import { DeepMap, FieldError, UseFormRegister, UseFormSetValue } from 'react-hook-form';\n\nexport interface FormInputs {\n  race: string;\n  subRace: string;\n  class: string;\n  subClass: string;\n  abilityScores: AbilityOptions;\n  background: {\n    parents: {\n      knowledge: APIReference;\n      race: APIReference;\n    },\n    birthplace?: APIReference;\n    siblings?: {\n      occupation?: APIReference;\n      alignment?: APIReference;\n      status?: APIReference;\n      relationship?: APIReference;\n      number?: APIReference;\n      birthOrder?: APIReference;\n      details?: APIReference;\n    }\n  };\n}\n\nexport interface ParentsBackground {\n\n}\nexport interface GenericComponentProps {\n  register: UseFormRegister<FormInputs>;\n  errors: DeepMap<FormInputs, FieldError>;\n  handleStepForward: () => void;\n  handleStepBack: () => void;\n  setFieldValue: UseFormSetValue<FormInputs>;\n}\n\nexport interface Race {\n  index: string;\n  name: string;\n  speed: number;\n  ability_bonuses: AbilityBonus[];\n  alignment: string;\n  age: string;\n  size:string;\n  size_description: string;\n  starting_proficiencies: CommonModel[];\n  starting_proficiency_options: {\n    choose: number;\n    type: string;\n    from: CommonModel[];\n  };\n  languages: CommonModel[];\n  language_desc: string;\n  traits: CommonModel[];\n  subraces: CommonModel[];\n  url: string;\n}\n\nexport interface SubRace {\n  index: string;\n  name: string;\n  race: CommonModel;\n  desc: string;\n  ability_bonuses: AbilityBonus[];\n  starting_proficiencies: CommonModel[];\n  languages: CommonModel[];\n  racial_traits: CommonModel[];\n  url: string;\n}\n\nexport interface Class {\n  index: string;\n  name: string;\n  hit_die: number;\n  proficiency_choices: [\n    {\n      choose: number;\n      type: string;\n      from: CommonModel[];\n    }\n  ];\n  proficiencies: CommonModel[];\n  saving_throws: CommonModel[];\n  starting_equipment: StartingEquipment[];\n  starting_equipment_options: StartingEquipmentOptions[];\n  class_levels: string;\n  multi_classing: {\n    prerequisites: [\n      {\n        ability_score: CommonModel;\n        minimum_score: number;\n      }\n    ];\n    proficiencies: CommonModel[];\n  };\n  subclasses: CommonModel[];\n  spellcasting: {\n    level: number;\n    spellcasting_ability: CommonModel;\n    info: [\n      {\n        name: string;\n        desc: string[];\n      }\n    ]\n  };\n  spells: string;\n  url: string;\n}\n\nexport interface SubClass {\n  index: string;\n  class: CommonModel;\n  name: string;\n  subclass_flavor: string;\n  desc: string[];\n  spells: Spells[];\n  subclass_levels: string;\n  url: string;\n}\n\nexport interface Background {\n  index: string;\n  name: string;\n  starting_proficiencies: CommonModel[];\n  language_options: LanguageOptions;\n  starting_equipment: StartingEquipment[];\n  starting_equipment_options: StartingEquipmentOptions[];\n  feature: {\n    desc: string[];\n    name: string;\n  };\n  personality_traits: PersonalityTraits;\n  ideals: Ideals;\n  bonds: Bonds;\n  flaws: Flaws;\n}\n\n// At some point would be good to re-type these to hold the specific traits they can be...\nexport interface CommonModel {\n  url: string;\n  index:string;\n  name: string;\n}\n\nexport interface Spells {\n  prerequisites: [\n    {\n      index: string;\n      type: string;\n      name: string;\n      url: string;\n    }\n  ];\n  spell: CommonModel;\n}\nexport interface AbilityBonus {\n  ability_score: {\n    name: AbilityOptionsShort;\n    index: string;\n    url: string;\n  };\n  bonus: number;\n}\n\nexport type Races = 'dragonborn' | 'dwarf' | 'elf' | 'gnome' | 'half-elf' | 'half-orc' | 'halfling' | 'human' | 'tiefling' | '';\n\nexport type Classes = \"barbarian\" | \"bard\" | \"cleric\" | \"druid\" | \"fighter\" | \"monk\" | \"paladin\" | \"ranger\" | \"rogue\" | \"sorcerer\" | \"warlock\" | \"wizard\" | \"\";\n\nexport type AbilityOptionsShort = 'CON' | 'DEX' | 'STR' | 'INT' | 'WIS' | 'CHA';\n\nexport type AbilityOptionsFull = 'constitution' | 'dexterity' | 'strength' | 'intelligence' | 'wisdom' | 'charisma';\n\nexport type AbilityOptions = {\n  constitution: number;\n  dexterity: number;\n  strength: number;\n  intelligence: number;\n  wisdom: number;\n  charisma: number;\n};\n\nexport enum RaceEnum {\n  dragonborn = 'Dragonborn',\n  dwarf = 'Dwarf',\n  elf = 'Elf',\n  gnome = 'Gnome',\n  'half-elf' = 'Half-Elf',\n  'half-orc' = 'Half-Orc',\n  halfling = 'Halfling',\n  human = 'Human',\n  tiefling = 'Tiefling',\n}\n\nexport enum ClassEnum {\n  barbarian = \"Barbarian\",\n  bard = \"Bard\",\n  cleric = \"Cleric\",\n  druid = \"Druid\",\n  fighter = \"Fighter\",\n  monk = \"Monk\",\n  paladin = \"Paladin\",\n  ranger = \"Ranger\",\n  rogue = \"Rogue\",\n  sorcerer = \"Sorcerer\",\n  warlock = \"Warlock\",\n  wizard = \"Wizard\",\n}\n\nexport enum AbilityMapEnum {\n  CON = 'Constitution',\n  DEX = 'Dexterity',\n  STR = 'Strength',\n  INT = 'Intelligence',\n  WIS = 'Wisdom',\n  CHA = 'Charisma',\n}\n\nexport enum AbilityMapEnumShort {\n  constitution = 'CON',\n  dexterity = 'DEX',\n  strength = 'STR',\n  intelligence = 'INT',\n  wisdom = 'WIS',\n  charisma = 'CHA',\n}\n\nexport interface StartingEquipment {\n  equipment: CommonModel;\n  quantity: number;\n}\n\nexport interface StartingEquipmentOptions {\n  choose: number;\n  type: \"equipment\";\n  from: [\n    {\n      equipment: CommonModel;\n      quantity: number;\n    }\n  ]\n}\n\nexport interface LanguageOptions {\n  from: CommonModel[];\n  choose: number;\n  type: 'languages';\n}\n\nexport interface Bonds {\n  from: CommonModel[];\n  choose: number;\n  type: 'bonds';\n}\n\nexport interface Flaws {\n  from: CommonModel[];\n  choose: number;\n  type: 'flaws';\n}\n\nexport interface Ideals {\n  from: [\n    {\n      desc: string\n      alignments: CommonModel[];\n    }\n  ];\n  choose: number;\n  type: 'ideals';\n};\n\nexport interface PersonalityTraits {\n  from: string[];\n  choose: number;\n  type: 'personality_traits'\n};\n\nexport interface APIReference {\n  index: string;\n  name: string;\n}"]},"metadata":{},"sourceType":"module"}