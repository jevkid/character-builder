{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { getAllRaces, getAllSubRaces, getAllClasses, getAllSubClasses, getRaceDetails } from '../../api';\nimport { commonActions } from '../slices/common';\nexport function* returnRaceDetails(action) {\n  const response = yield call(getRaceDetails, action.payload.index);\n  yield put(commonActions.getDetailedRaceLoading());\n\n  if (response.data) {\n    yield put(commonActions.getDetailedRaceSuccess(response.data));\n  } else {\n    yield put(commonActions.getDetailedRaceFailure());\n  }\n}\nexport function* returnAllRaces() {\n  const response = yield call(getAllRaces);\n  yield put(commonActions.getAllRacesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllRacesFailure());\n  }\n}\nexport function* returnAllSubRaces(action) {\n  const response = yield call(getAllSubRaces, action.payload.index);\n  yield put(commonActions.getAllSubRacesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubRacesFailure());\n  }\n}\nexport function* returnAllClasses() {\n  const response = yield call(getAllClasses);\n  yield put(commonActions.getAllClassesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllClassesFailure());\n  }\n}\nexport function* returnAllSubClasses(action) {\n  const response = yield call(getAllSubClasses, action.payload.index);\n  yield put(commonActions.getAllSubClassesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubClassesFailure());\n  }\n}","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/sagas/common.ts"],"names":["call","put","getAllRaces","getAllSubRaces","getAllClasses","getAllSubClasses","getRaceDetails","commonActions","returnRaceDetails","action","response","payload","index","getDetailedRaceLoading","data","getDetailedRaceSuccess","getDetailedRaceFailure","returnAllRaces","getAllRacesLoading","getAllRacesSuccess","getAllRacesFailure","returnAllSubRaces","getAllSubRacesLoading","results","getAllSubRacesSuccess","getAllSubRacesFailure","returnAllClasses","getAllClassesLoading","getAllClassesSuccess","getAllClassesFailure","returnAllSubClasses","getAllSubClassesLoading","getAllSubClassesSuccess","getAllSubClassesFailure"],"mappings":"AACA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,aAAtC,EAAqDC,gBAArD,EAAuEC,cAAvE,QAA6F,WAA7F;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAO,UAAUC,iBAAV,CAA4BC,MAA5B,EAAqF;AAC1F,QAAMC,QAAyC,GAAG,MAAMV,IAAI,CAACM,cAAD,EAAiBG,MAAM,CAACE,OAAP,CAAeC,KAAhC,CAA5D;AACA,QAAMX,GAAG,CAACM,aAAa,CAACM,sBAAd,EAAD,CAAT;;AAEA,MAAIH,QAAQ,CAACI,IAAb,EAAmB;AACjB,UAAMb,GAAG,CAACM,aAAa,CAACQ,sBAAd,CAAqCL,QAAQ,CAACI,IAA9C,CAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMb,GAAG,CAACM,aAAa,CAACS,sBAAd,EAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUC,cAAV,GAA2B;AAChC,QAAMP,QAA4C,GAAG,MAAMV,IAAI,CAACE,WAAD,CAA/D;AACA,QAAMD,GAAG,CAACM,aAAa,CAACW,kBAAd,EAAD,CAAT;;AAEA,MAAIR,QAAQ,CAACI,IAAb,EAAmB;AACjB,UAAMb,GAAG,CAACM,aAAa,CAACY,kBAAd,CAAiCT,QAAQ,CAACI,IAA1C,CAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMb,GAAG,CAACM,aAAa,CAACa,kBAAd,EAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUC,iBAAV,CAA4BZ,MAA5B,EAAqF;AAC1F,QAAMC,QAA+C,GAAG,MAAMV,IAAI,CAACG,cAAD,EAAiBM,MAAM,CAACE,OAAP,CAAeC,KAAhC,CAAlE;AACA,QAAMX,GAAG,CAACM,aAAa,CAACe,qBAAd,EAAD,CAAT;;AAEA,MAAIZ,QAAQ,CAACI,IAAT,CAAcS,OAAlB,EAA2B;AACzB,UAAMtB,GAAG,CAACM,aAAa,CAACiB,qBAAd,CAAoCd,QAAQ,CAACI,IAA7C,CAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMb,GAAG,CAACM,aAAa,CAACkB,qBAAd,EAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,QAAMhB,QAA8C,GAAG,MAAMV,IAAI,CAACI,aAAD,CAAjE;AACA,QAAMH,GAAG,CAACM,aAAa,CAACoB,oBAAd,EAAD,CAAT;;AAEA,MAAIjB,QAAQ,CAACI,IAAb,EAAmB;AACjB,UAAMb,GAAG,CAACM,aAAa,CAACqB,oBAAd,CAAmClB,QAAQ,CAACI,IAA5C,CAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMb,GAAG,CAACM,aAAa,CAACsB,oBAAd,EAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,CAA8BrB,MAA9B,EAAyF;AAC9F,QAAMC,QAAiD,GAAG,MAAMV,IAAI,CAACK,gBAAD,EAAmBI,MAAM,CAACE,OAAP,CAAeC,KAAlC,CAApE;AACA,QAAMX,GAAG,CAACM,aAAa,CAACwB,uBAAd,EAAD,CAAT;;AAEA,MAAIrB,QAAQ,CAACI,IAAT,CAAcS,OAAlB,EAA2B;AACzB,UAAMtB,GAAG,CAACM,aAAa,CAACyB,uBAAd,CAAsCtB,QAAQ,CAACI,IAA/C,CAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAMb,GAAG,CAACM,aAAa,CAAC0B,uBAAd,EAAD,CAAT;AACD;AACF","sourcesContent":["import { AxiosResponse } from 'axios';\nimport { call, put } from 'redux-saga/effects';\nimport { getAllRaces, getAllSubRaces, getAllClasses, getAllSubClasses, getRaceDetails } from '../../api';\nimport { APIAllRacesResponse, APIAllSubRacesResponse, APIAllClassesResponse, APIAllSubClassesResponse, APIRacesResponse } from '../../api/types';\nimport { commonActions } from '../slices/common';\n\nexport function* returnRaceDetails(action: ReturnType<typeof commonActions.getRaceDetails>) {\n  const response: AxiosResponse<APIRacesResponse> = yield call(getRaceDetails, action.payload.index);\n  yield put(commonActions.getDetailedRaceLoading());\n\n  if (response.data) {\n    yield put(commonActions.getDetailedRaceSuccess(response.data));\n  } else {\n    yield put(commonActions.getDetailedRaceFailure());\n  }\n}\n\nexport function* returnAllRaces() {\n  const response: AxiosResponse<APIAllRacesResponse> = yield call(getAllRaces);\n  yield put(commonActions.getAllRacesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllRacesFailure());\n  }\n}\n\nexport function* returnAllSubRaces(action: ReturnType<typeof commonActions.getAllSubRaces>) {\n  const response: AxiosResponse<APIAllSubRacesResponse> = yield call(getAllSubRaces, action.payload.index);\n  yield put(commonActions.getAllSubRacesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubRacesFailure());\n  }\n}\n\nexport function* returnAllClasses() {\n  const response: AxiosResponse<APIAllClassesResponse> = yield call(getAllClasses);\n  yield put(commonActions.getAllClassesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllClassesFailure());\n  }\n}\n\nexport function* returnAllSubClasses(action: ReturnType<typeof commonActions.getAllSubClasses>) {\n  const response: AxiosResponse<APIAllSubClassesResponse> = yield call(getAllSubClasses, action.payload.index);\n  yield put(commonActions.getAllSubClassesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubClassesFailure());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}