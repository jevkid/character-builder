{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit'; // set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n// save form\n\nconst initialState = {\n  selectedRace: {},\n  selectedSubrace: {},\n  selectedClass: {},\n  selectedSubclass: {}\n};\nconst SLICE_NAME = 'characterBuilder';\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    setSelectedRaceToStatePending: state => {\n      state.selectedRace.pending = true;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateSuccess: (state, action) => {\n      state.selectedRace.selected = action.payload;\n      state.selectedRace.pending = false;\n      state.selectedRace.success = true;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateFailure: state => {\n      state.selectedRace.pending = false;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = true;\n    },\n    setSelectedSubraceToStatePending: state => {\n      state.selectedSubrace.pending = true;\n      state.selectedSubrace.success = false;\n      state.selectedSubrace.failure = false;\n    },\n    setSelectedSubraceToStateSuccess: (state, action) => {\n      state.selectedSubrace.selected = action.payload;\n      state.selectedSubrace.pending = false;\n      state.selectedSubrace.success = true;\n      state.selectedSubrace.failure = false;\n    },\n    setSelectedSubraceToStateFailure: state => {\n      state.selectedSubrace.pending = false;\n      state.selectedSubrace.success = false;\n      state.selectedSubrace.failure = true;\n    },\n    setSelectedClassToStatePending: state => {\n      state.selectedClass.pending = true;\n      state.selectedClass.success = false;\n      state.selectedClass.failure = false;\n    },\n    setSelectedClassToStateSuccess: (state, action) => {\n      state.selectedClass.selected = action.payload;\n      state.selectedClass.pending = false;\n      state.selectedClass.success = true;\n      state.selectedClass.failure = false;\n    },\n    setSelectedClassToStateFailure: state => {\n      state.selectedClass.pending = false;\n      state.selectedClass.success = false;\n      state.selectedClass.failure = true;\n    },\n    setSelectedSubclassToStatePending: state => {\n      state.selectedSubclass.pending = true;\n      state.selectedSubclass.success = false;\n      state.selectedSubclass.failure = false;\n    },\n    setSelectedSubclassToStateSuccess: (state, action) => {\n      state.selectedSubclass.selected = action.payload;\n      state.selectedSubclass.pending = false;\n      state.selectedSubclass.success = true;\n      state.selectedSubclass.failure = false;\n    },\n    setSelectedSubclassToStateFailure: state => {\n      state.selectedSubclass.pending = false;\n      state.selectedSubclass.success = false;\n      state.selectedSubclass.failure = true;\n    }\n  }\n});\nexport const {\n  reducer: characterBuilderReducer\n} = characterBuilderSlice;\nexport const characterBuilderActions = { ...characterBuilderSlice.actions,\n  setSelectedRaceToState: createAction(`${SLICE_NAME}/setSelectedRaceToState`, payload => ({\n    payload\n  })),\n  setSelectedSubraceToState: createAction(`${SLICE_NAME}/setSelectedSubraceToState`, payload => ({\n    payload\n  })),\n  setSelectedClassToState: createAction(`${SLICE_NAME}/setSelectedClassToState`, payload => ({\n    payload\n  })),\n  setSelectedSubclassToState: createAction(`${SLICE_NAME}/setSelectedSubclassToState`, payload => ({\n    payload\n  }))\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/characterBuilder.ts"],"names":["createAction","createSlice","initialState","selectedRace","selectedSubrace","selectedClass","selectedSubclass","SLICE_NAME","characterBuilderSlice","name","reducers","setSelectedRaceToStatePending","state","pending","success","failure","setSelectedRaceToStateSuccess","action","selected","payload","setSelectedRaceToStateFailure","setSelectedSubraceToStatePending","setSelectedSubraceToStateSuccess","setSelectedSubraceToStateFailure","setSelectedClassToStatePending","setSelectedClassToStateSuccess","setSelectedClassToStateFailure","setSelectedSubclassToStatePending","setSelectedSubclassToStateSuccess","setSelectedSubclassToStateFailure","reducer","characterBuilderReducer","characterBuilderActions","actions","setSelectedRaceToState","setSelectedSubraceToState","setSelectedClassToState","setSelectedSubclassToState"],"mappings":"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","sourcesContent":["import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// set selected race\n// set selected subrace\n// set selected class\n// set selected subclass\n// set ability scores { each individual one }\n// set selected background\n// save form\n\n\nexport interface CharacterBuilderState {\n  selectedRace: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n  selectedSubrace: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n  selectedClass: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n  selectedSubclass: {\n    selected?: string;\n    pending?: boolean;\n    success?: boolean;\n    failure?: boolean;\n  };\n}\n\nconst initialState: CharacterBuilderState = {\n  selectedRace: {},\n  selectedSubrace: {},\n  selectedClass: {},\n  selectedSubclass: {},\n};\n\nconst SLICE_NAME = 'characterBuilder';\n\nconst characterBuilderSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    setSelectedRaceToStatePending: (state) => {\n      state.selectedRace.pending = true;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateSuccess: (state, action: PayloadAction<string>) => {\n      state.selectedRace.selected = action.payload;\n      state.selectedRace.pending = false;\n      state.selectedRace.success = true;\n      state.selectedRace.failure = false;\n    },\n    setSelectedRaceToStateFailure: (state) => {\n      state.selectedRace.pending = false;\n      state.selectedRace.success = false;\n      state.selectedRace.failure = true;\n    },\n    setSelectedSubraceToStatePending: (state) => {\n      state.selectedSubrace.pending = true;\n      state.selectedSubrace.success = false;\n      state.selectedSubrace.failure = false;\n    },\n    setSelectedSubraceToStateSuccess: (state, action: PayloadAction<string>) => {\n      state.selectedSubrace.selected = action.payload;\n      state.selectedSubrace.pending = false;\n      state.selectedSubrace.success = true;\n      state.selectedSubrace.failure = false;\n    },\n    setSelectedSubraceToStateFailure: (state) => {\n      state.selectedSubrace.pending = false;\n      state.selectedSubrace.success = false;\n      state.selectedSubrace.failure = true;\n    },\n    setSelectedClassToStatePending: (state) => {\n      state.selectedClass.pending = true;\n      state.selectedClass.success = false;\n      state.selectedClass.failure = false;\n    },\n    setSelectedClassToStateSuccess: (state, action: PayloadAction<string>) => {\n      state.selectedClass.selected = action.payload;\n      state.selectedClass.pending = false;\n      state.selectedClass.success = true;\n      state.selectedClass.failure = false;\n    },\n    setSelectedClassToStateFailure: (state) => {\n      state.selectedClass.pending = false;\n      state.selectedClass.success = false;\n      state.selectedClass.failure = true;\n    },\n    setSelectedSubclassToStatePending: (state) => {\n      state.selectedSubclass.pending = true;\n      state.selectedSubclass.success = false;\n      state.selectedSubclass.failure = false;\n    },\n    setSelectedSubclassToStateSuccess: (state, action: PayloadAction<string>) => {\n      state.selectedSubclass.selected = action.payload;\n      state.selectedSubclass.pending = false;\n      state.selectedSubclass.success = true;\n      state.selectedSubclass.failure = false;\n    },\n    setSelectedSubclassToStateFailure: (state) => {\n      state.selectedSubclass.pending = false;\n      state.selectedSubclass.success = false;\n      state.selectedSubclass.failure = true;\n    },\n  },\n});\n\nexport const { reducer: characterBuilderReducer } = characterBuilderSlice;\n\nexport const characterBuilderActions = {\n  ...characterBuilderSlice.actions,\n\n  setSelectedRaceToState: createAction(\n    `${SLICE_NAME}/setSelectedRaceToState`,\n    (payload: { race: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedSubraceToState: createAction(\n    `${SLICE_NAME}/setSelectedSubraceToState`,\n    (payload: { subrace: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedClassToState: createAction(\n    `${SLICE_NAME}/setSelectedClassToState`,\n    (payload: { class: string }) => ({\n      payload,\n    }),\n  ),\n  setSelectedSubclassToState: createAction(\n    `${SLICE_NAME}/setSelectedSubclassToState`,\n    (payload: { subclass: string }) => ({\n      payload,\n    }),\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}