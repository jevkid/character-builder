{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { getAllRaces, getAllSubRaces, getAllClasses, getAllSubClasses, getRaceDetails, getClassDetails } from '../../api';\nimport { commonActions } from '../slices/common';\nexport function* returnRaceDetails(action) {\n  const response = yield call(getRaceDetails, action.payload.index);\n  yield put(commonActions.getDetailedRaceLoading());\n\n  if (response.data) {\n    yield put(commonActions.getDetailedRaceSuccess(response.data));\n  } else {\n    yield put(commonActions.getDetailedRaceFailure());\n  }\n}\nexport function* returnClassDetails(action) {\n  const response = yield call(getClassDetails, action.payload.index);\n  yield put(commonActions.getDetailedClassLoading());\n\n  if (response.data) {\n    yield put(commonActions.getDetailedClassSuccess(response.data));\n  } else {\n    yield put(commonActions.getDetailedClassFailure());\n  }\n}\nexport function* returnAllRaces() {\n  const response = yield call(getAllRaces);\n  yield put(commonActions.getAllRacesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllRacesFailure());\n  }\n}\nexport function* returnAllSubRaces(action) {\n  const response = yield call(getAllSubRaces, action.payload.index);\n  yield put(commonActions.getAllSubRacesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubRacesFailure());\n  }\n}\nexport function* returnAllClasses() {\n  const response = yield call(getAllClasses);\n  yield put(commonActions.getAllClassesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllClassesFailure());\n  }\n}\nexport function* returnAllSubClasses(action) {\n  const response = yield call(getAllSubClasses, action.payload.index);\n  yield put(commonActions.getAllSubClassesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubClassesFailure());\n  }\n}\nexport function* returnAllBackgrounds() {\n  const response = yield call(getAllBackgrounds);\n  yield put(commonActions.getAllBackgroundsLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllBackgroundsSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllBackgroundsFailure());\n  }\n}","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/sagas/common.ts"],"names":["call","put","getAllRaces","getAllSubRaces","getAllClasses","getAllSubClasses","getRaceDetails","getClassDetails","commonActions","returnRaceDetails","action","response","payload","index","getDetailedRaceLoading","data","getDetailedRaceSuccess","getDetailedRaceFailure","returnClassDetails","getDetailedClassLoading","getDetailedClassSuccess","getDetailedClassFailure","returnAllRaces","getAllRacesLoading","getAllRacesSuccess","getAllRacesFailure","returnAllSubRaces","getAllSubRacesLoading","results","getAllSubRacesSuccess","getAllSubRacesFailure","returnAllClasses","getAllClassesLoading","getAllClassesSuccess","getAllClassesFailure","returnAllSubClasses","getAllSubClassesLoading","getAllSubClassesSuccess","getAllSubClassesFailure","returnAllBackgrounds","getAllBackgrounds","getAllBackgroundsLoading","getAllBackgroundsSuccess","getAllBackgroundsFailure"],"mappings":"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","sourcesContent":["import { AxiosResponse } from 'axios';\nimport { call, put } from 'redux-saga/effects';\nimport { getAllRaces, getAllSubRaces, getAllClasses, getAllSubClasses, getRaceDetails, getClassDetails } from '../../api';\nimport { APIAllRacesResponse, APIAllSubRacesResponse, APIAllClassesResponse, APIAllSubClassesResponse, APIRacesResponse, APIClassesResponse } from '../../api/types';\nimport { commonActions } from '../slices/common';\n\nexport function* returnRaceDetails(action: ReturnType<typeof commonActions.getRaceDetails>) {\n  const response: AxiosResponse<APIRacesResponse> = yield call(getRaceDetails, action.payload.index);\n  yield put(commonActions.getDetailedRaceLoading());\n\n  if (response.data) {\n    yield put(commonActions.getDetailedRaceSuccess(response.data));\n  } else {\n    yield put(commonActions.getDetailedRaceFailure());\n  }\n}\n\n\nexport function* returnClassDetails(action: ReturnType<typeof commonActions.getClassDetails>) {\n  const response: AxiosResponse<APIClassesResponse> = yield call(getClassDetails, action.payload.index);\n  yield put(commonActions.getDetailedClassLoading());\n\n  if (response.data) {\n    yield put(commonActions.getDetailedClassSuccess(response.data));\n  } else {\n    yield put(commonActions.getDetailedClassFailure());\n  }\n}\n\nexport function* returnAllRaces() {\n  const response: AxiosResponse<APIAllRacesResponse> = yield call(getAllRaces);\n  yield put(commonActions.getAllRacesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllRacesFailure());\n  }\n}\n\nexport function* returnAllSubRaces(action: ReturnType<typeof commonActions.getAllSubRaces>) {\n  const response: AxiosResponse<APIAllSubRacesResponse> = yield call(getAllSubRaces, action.payload.index);\n  yield put(commonActions.getAllSubRacesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubRacesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubRacesFailure());\n  }\n}\n\nexport function* returnAllClasses() {\n  const response: AxiosResponse<APIAllClassesResponse> = yield call(getAllClasses);\n  yield put(commonActions.getAllClassesLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllClassesFailure());\n  }\n}\n\nexport function* returnAllSubClasses(action: ReturnType<typeof commonActions.getAllSubClasses>) {\n  const response: AxiosResponse<APIAllSubClassesResponse> = yield call(getAllSubClasses, action.payload.index);\n  yield put(commonActions.getAllSubClassesLoading());\n\n  if (response.data.results) {\n    yield put(commonActions.getAllSubClassesSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllSubClassesFailure());\n  }\n}\n\nexport function* returnAllBackgrounds() {\n  const response: AxiosResponse<APIAllBackgroundsResponse> = yield call(getAllBackgrounds);\n  yield put(commonActions.getAllBackgroundsLoading());\n\n  if (response.data) {\n    yield put(commonActions.getAllBackgroundsSuccess(response.data));\n  } else {\n    yield put(commonActions.getAllBackgroundsFailure());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}