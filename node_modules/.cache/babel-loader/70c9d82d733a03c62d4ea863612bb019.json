{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  races: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    }\n  },\n  subRaces: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    }\n  },\n  classes: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    }\n  },\n  subClasses: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    }\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: []\n  }\n};\nconst SLICE_NAME = 'common';\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getAllRacesLoading: state => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: state => {\n      state.races.loading = false;\n      state.races.error = true;\n    },\n    getAllSubRacesLoading: state => {\n      state.subRaces.loading = true;\n    },\n    getAllSubRacesSuccess: (state, action) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = false;\n      state.subRaces.options = action.payload;\n    },\n    getAllSubRacesFailure: state => {\n      state.subRaces.loading = false;\n      state.subRaces.error = true;\n    },\n    getAllClassesLoading: state => {\n      state.subRaces.loading = true;\n    },\n    getAllClassesSuccess: (state, action) => {\n      state.classes.loading = false;\n      state.classes.error = false;\n      state.classes.options = action.payload;\n    },\n    getAllClassesFailure: state => {\n      state.classes.loading = false;\n      state.classes.error = true;\n    },\n    getAllSubClassesLoading: state => {\n      state.subClasses.loading = true;\n    },\n    getAllSubClassesSuccess: (state, action) => {\n      state.subClasses.loading = false;\n      state.subClasses.error = false;\n      state.subClasses.options = action.payload;\n    },\n    getAllSubClassesFailure: state => {\n      state.subClasses.loading = false;\n      state.subClasses.error = true;\n    }\n  }\n});\nexport const {\n  reducer: commonReducer\n} = commonSlice;\nexport const commonActions = { ...commonSlice.actions,\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`),\n  getAllSubRaces: createAction(`${SLICE_NAME}/getAllSubRaces`),\n  getAllClasses: createAction(`${SLICE_NAME}/getAllClasses`),\n  getAllSubClasses: createAction(`${SLICE_NAME}/getAllSubClasses`)\n};","map":{"version":3,"sources":["/Users/meganjevin/Desktop/Code/character-builder/src/store/slices/common.ts"],"names":["createAction","createSlice","initialState","races","loading","error","options","count","results","subRaces","classes","subClasses","backgrounds","SLICE_NAME","commonSlice","name","reducers","getAllRacesLoading","state","getAllRacesSuccess","action","payload","getAllRacesFailure","getAllSubRacesLoading","getAllSubRacesSuccess","getAllSubRacesFailure","getAllClassesLoading","getAllClassesSuccess","getAllClassesFailure","getAllSubClassesLoading","getAllSubClassesSuccess","getAllSubClassesFailure","reducer","commonReducer","commonActions","actions","getAllRaces","getAllSubRaces","getAllClasses","getAllSubClasses"],"mappings":"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","sourcesContent":["import { PayloadAction, createAction, createSlice } from '@reduxjs/toolkit';\nimport { APIAllRacesResponse, APIAllSubRacesResponse, APIAllClassesResponse, APIAllSubClassesResponse } from '../../api/types';\n\nexport interface CommonState {\n  races: {\n    loading: boolean;\n    error: boolean;\n    options: APIAllRacesResponse;\n    selected?: string;\n  },\n  subRaces: {\n    loading: boolean;\n    error: boolean;\n    options: APIAllSubRacesResponse;\n    selected?: string;\n  },\n  classes: {\n    loading: boolean;\n    error: boolean;\n    options: APIAllClassesResponse;\n    selected?: string;\n  },\n  subClasses: {\n    loading: boolean;\n    error: boolean;\n    options: APIAllSubClassesResponse;\n    selected?: string;\n  },\n  backgrounds: {\n    loading: boolean;\n    error: boolean;\n    options: [];\n    selected?: string;\n  },\n}\n\nconst initialState: CommonState = {\n  races: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    },\n  },\n  subRaces: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    },\n  },\n  classes: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    },\n  },\n  subClasses: {\n    loading: false,\n    error: false,\n    options: {\n      count: 0,\n      results: []\n    },\n  },\n  backgrounds: {\n    loading: false,\n    error: false,\n    options: [],\n  },\n};\n\nconst SLICE_NAME = 'common';\n\nconst commonSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    getAllRacesLoading: (state) => {\n      state.races.loading = true;\n    },\n    getAllRacesSuccess: (state, action: PayloadAction<APIAllRacesResponse>) => {\n      state.races.loading = false;\n      state.races.error = false;\n      state.races.options = action.payload;\n    },\n    getAllRacesFailure: (state) => {\n      state.races.loading = false;\n      state.races.error = true;\n    },\n    getAllSubRacesLoading: (state) => {\n      state.subRaces.loading = true;\n    },\n    getAllSubRacesSuccess: (state, action: PayloadAction<APIAllSubRacesResponse>) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = false;\n      state.subRaces.options = action.payload;\n    },\n    getAllSubRacesFailure: (state) => {\n      state.subRaces.loading = false;\n      state.subRaces.error = true;\n    },\n    getAllClassesLoading: (state) => {\n      state.subRaces.loading = true;\n    },\n    getAllClassesSuccess: (state, action: PayloadAction<APIAllClassesResponse>) => {\n      state.classes.loading = false;\n      state.classes.error = false;\n      state.classes.options = action.payload;\n    },\n    getAllClassesFailure: (state) => {\n      state.classes.loading = false;\n      state.classes.error = true;\n    },\n    getAllSubClassesLoading: (state) => {\n      state.subClasses.loading = true;\n    },\n    getAllSubClassesSuccess: (state, action: PayloadAction<APIAllSubClassesResponse>) => {\n      state.subClasses.loading = false;\n      state.subClasses.error = false;\n      state.subClasses.options = action.payload;\n    },\n    getAllSubClassesFailure: (state) => {\n      state.subClasses.loading = false;\n      state.subClasses.error = true;\n    },\n  },\n});\n\nexport const { reducer: commonReducer } = commonSlice;\n\nexport const commonActions = {\n  ...commonSlice.actions,\n\n  getAllRaces: createAction(`${SLICE_NAME}/getAllRaces`),\n  getAllSubRaces: createAction(`${SLICE_NAME}/getAllSubRaces`),\n  getAllClasses: createAction(`${SLICE_NAME}/getAllClasses`),\n  getAllSubClasses: createAction(`${SLICE_NAME}/getAllSubClasses`),\n};\n"]},"metadata":{},"sourceType":"module"}